mylist[[i]] <- "C"
} else if (mystr[i] == "C") {
mylist[[i]] <- "G"
} else {
mylist[[i]] <- "N"
}
}
mylist %>% unlist() %>% rev() %>% str_c(collapse = "")
# read dataset
mydata = fread('dataset_3_5.txt', stringsAsFactors = F, header = F)
mydata
mypattern <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
mygenome <- mydata[2,1] %>% pull() %>% str_split(., "") %>% .[[1]]
mygenome
mypattern
mypattern
mylist <- vector(mode = "list", length = (length(mystr) - length(mypattern) + 1))
for (i in 1:(length(mystr) - length(mypattern)+ 1)) {
mylist[[i]] <- mystr[i:(i + length(mypattern) - 1)]
}
mylist
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
names()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
filter(`.` == mypattern)
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>% .[mypattern]
mypattern
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
filter(`.` ==  str_c(mypattern, collapse = ""))
str_c(mypattern, collapse = "")
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
filter(`.` ==  str_c(mypattern, collapse = ""))
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
filter(`.` ==  "TCGTTAAGC")
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>% .["TCGTTAAGC"]
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>% .["TCGTTAAGC"]
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>% .[which("TCGTTAAGC")]
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>% .[c("TCGTTAAGC")]
mypattern
# Code Challenge: Solve the Pattern Matching Problem.
# Input: Two strings, Pattern and Genome.
# Output: A collection of space-separated integers specifying all starting positions where Pattern appears as a substring of Genome.
# load packages
library(data.table)
library(tidyverse)
# read dataset
mydata = fread('dataset_3_5.txt', stringsAsFactors = F, header = F)
# split strings to characters
mypattern <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
mygenome <- mydata[2,1] %>% pull() %>% str_split(., "") %>% .[[1]]
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - length(mypattern) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - length(mypattern)+ 1)) {
mylist[[i]] <- mystr[i:(i + length(mypattern) - 1)]
}
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
filter(`.` ==  str_c(mypattern, collapse = ""))
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame()
mystr
mylist
mylist %>%
map(~ str_c(., collapse = ""))
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame()
mypattern
str_c(mypattern, collapse = "")
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
filter(`.` ==  "TTGCAGCTT")
mydata = fread('dataset_3_5.txt', stringsAsFactors = F, header = F)
mydata
mydata[1,1]
mypattern <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
mypattern
# split strings to characters
mypattern <- mydata[1,1] %>% pull()  %>% .[[1]]
mypattern
mypattern
length(mypattern)
# split strings to characters
mypattern <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
mygenome <- mydata[2,1] %>% pull() %>% str_split(., "") %>% .[[1]]
mygenome
mylist <- vector(mode = "list", length = (length(mystr) - length(mypattern) + 1))
for (i in 1:(length(mystr) - length(mypattern) + 1)) {
mylist[[i]] <- mystr[i:(i + length(mypattern) - 1)]
}
mylist
mylist %>%
map(~ str_c(., collapse = ""))
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame()
# split strings to characters
mypattern <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
mygenome <- mydata[2,1] %>% pull() %>% str_split(., "") %>% .[[1]]
# create a place holder list
mylist <- vector(mode = "list", length = (length(mygenome) - length(mypattern) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mygenome) - length(mypattern) + 1)) {
mylist[[i]] <- mygenome[i:(i + length(mypattern) - 1)]
}
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
filter(`.` ==  "TTGCAGCTT")
mylist
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
filter(`.` ==  "TTGCAGCTT")
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
filter(`.` ==  "TTGCAGCTT")
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
filter(`.` ==  "TTGCAGCTT") %>%
mutate(index = rowname - 1)
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
filter(`.` ==  "TTGCAGCTT") %>%
mutate(index = as.numeric(rowname) - 1)
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
filter(`.` ==  "TTGCAGCTT") %>%
mutate(index = as.numeric(rowname) - 1) %>%
pull(index)
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
filter(`.` ==  "TTGCAGCTT") %>%
mutate(index = as.numeric(rowname) - 1) %>%
pull(index) %>% str_c(., collapse = "/t")
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
filter(`.` ==  "TTGCAGCTT") %>%
mutate(index = as.numeric(rowname) - 1) %>%
pull(index) %>% str_c(., collapse = "\t")
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
filter(`.` ==  "TTGCAGCTT") %>%
mutate(index = as.numeric(rowname) - 1) %>%
pull(index) %>% str_c(., collapse = " ")
# Code Challenge: Solve the Pattern Matching Problem.
# Input: Two strings, Pattern and Genome.
# Output: A collection of space-separated integers specifying all starting positions where Pattern appears as a substring of Genome.
# load packages
library(data.table)
library(tidyverse)
# read dataset
mydata = fread('dataset_3_5.txt', stringsAsFactors = F, header = F)
# split strings to characters
mypattern <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
mygenome <- mydata[2,1] %>% pull() %>% str_split(., "") %>% .[[1]]
# create a place holder list
mylist <- vector(mode = "list", length = (length(mygenome) - length(mypattern) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mygenome) - length(mypattern) + 1)) {
mylist[[i]] <- mygenome[i:(i + length(mypattern) - 1)]
}
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
filter(`.` ==  "TTGCAGCTT") %>%
mutate(index = as.numeric(rowname) - 1) %>%
pull(index) %>% str_c(., collapse = " ")
# Code Challenge: Solve the Pattern Matching Problem.
# Input: Two strings, Pattern and Genome.
# Output: A collection of space-separated integers specifying all starting positions where Pattern appears as a substring of Genome.
# load packages
library(data.table)
library(tidyverse)
# read dataset
mydata = fread('dataset_3_5.txt', stringsAsFactors = F, header = F)
# split strings to characters
mypattern <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
mygenome <- mydata[2,1] %>% pull() %>% str_split(., "") %>% .[[1]]
# create a place holder list
mylist <- vector(mode = "list", length = (length(mygenome) - length(mypattern) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mygenome) - length(mypattern) + 1)) {
mylist[[i]] <- mygenome[i:(i + length(mypattern) - 1)]
}
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
filter(`.` ==  str_c(mypattern, collapse = "")) %>%
mutate(index = as.numeric(rowname) - 1) %>%
pull(index) %>% str_c(., collapse = " ")
mydata = fread('Vibrio_cholerae.txt', stringsAsFactors = F, header = F)
mydata
# split strings to characters
mypattern <- c("CTTGATCAT") %>% str_split(., "") %>% .[[1]]
mypattern
dim(mydata)
mygenome <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
mygenome
mylist <- vector(mode = "list", length = (length(mygenome) - length(mypattern) + 1))
for (i in 1:(length(mygenome) - length(mypattern) + 1)) {
mylist[[i]] <- mygenome[i:(i + length(mypattern) - 1)]
}
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
filter(`.` ==  str_c(mypattern, collapse = "")) %>%
mutate(index = as.numeric(rowname) - 1) %>%
pull(index) %>% str_c(., collapse = " ")
# read dataset
mydata = fread('dataset_4_5.txt', stringsAsFactors = F, header = F)
mydata
# read dataset
mydata = fread('dataset_4_5.txt', stringsAsFactors = F, header = F)
mydata
# read dataset
mydata = fread('dataset_4_5.txt', stringsAsFactors = F, header = F, fill = T)
mydata
dim(mydata)
# read dataset
mydata = fread('dataset_4_5.txt', stringsAsFactors = F, header = F, fill = T)
mystr
mydata[2,1] %>% pull()
mydata[2,1] %>% pull() %>% str_split(., " ")
k <- mydata[2,1] %>% pull() %>% str_split(., " ") %>% .[[1]] %>% .[1]
k
L <- mydata[2,1] %>% pull() %>% str_split(., " ") %>% .[[1]] %>% .[2]
t <- mydata[2,1] %>% pull() %>% str_split(., " ") %>% .[[1]] %>% .[3]
mylist <- vector(mode = "list", length = (length(mystr) - as.numeric(k) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - as.numeric(k) + 1)) {
mylist[[i]] <- mystr[i:(i + as.numeric(k) - 1)]
}
mylist
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
table()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>% table()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column()
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>% count(.)
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>% count(`.`)
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>% names()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>% names() %>% count(`.`)
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>% count(`.`)
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column()
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>% count(".")
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>% freq(".")
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".")
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".") %>% count(kmer)
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".") %>% count(kmer) %>% filter(n >= t)
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".") %>% count(kmer) %>% filter(n >= t) %>% pull(kmer)
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".") %>% count(kmer) %>% filter(n >= t) %>% pull(kmer) -> candidate
candidate
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column()
# calculate freq for each k-mer and print out the most frequent k-mer
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column()
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".")
freq_table
freq_table %>% count(kmer) %>% filter(n >= t) %>% pull(kmer) -> candidate
candidate
freq_table %>% filter(kmer %in% candidate)
freq_table %>% filter(kmer %in% candidate) %>% group_by(kmer) %>% mutate(rowname = as.numeric(rowname)) %>% summarize(window = )
freq_table %>% filter(kmer %in% candidate) %>% group_by(kmer) %>% mutate(rowname = as.numeric(rowname))
freq_table %>% filter(kmer %in% candidate) %>% group_by(kmer) %>% mutate(rowname = as.numeric(rowname)) %>% summarize(window = range(rowname))
freq_table %>% filter(kmer %in% candidate) %>% group_by(kmer) %>% mutate(rowname = as.numeric(rowname)) %>% summarize(window = max(rowname) - min(rowname))
freq_table %>% filter(kmer %in% candidate) %>% group_by(kmer) %>% mutate(rowname = as.numeric(rowname)) %>% summarize(window = max(rowname) - min(rowname) + 1)
freq_table %>% filter(kmer %in% candidate) %>% group_by(kmer) %>% mutate(rowname = as.numeric(rowname)) %>% summarize(window = max(rowname) - min(rowname) + 1)
freq_table %>% filter(kmer %in% candidate) %>% group_by(kmer) %>% mutate(rowname = as.numeric(rowname)) %>% summarize(window = max(rowname) - min(rowname) + 1) %>% filter(window <= L)
L
k
L
t
mydata = fread('dataset_4_5.txt', stringsAsFactors = F, header = F, fill = T)
# split strings to characters
mystr <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
k <- mydata[2,1] %>% pull() %>% str_split(., " ") %>% .[[1]] %>% .[1]
L <- mydata[2,1] %>% pull() %>% str_split(., " ") %>% .[[1]] %>% .[2]
t <- mydata[2,1] %>% pull() %>% str_split(., " ") %>% .[[1]] %>% .[3]
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - as.numeric(k) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - as.numeric(k) + 1)) {
mylist[[i]] <- mystr[i:(i + as.numeric(k) - 1)]
}
mylist
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".")
freq_table
freq_table %>% count(kmer)
freq_table %>% count(kmer) %>% filter(n >= t)
freq_table %>% count(kmer) %>% filter(n > t)
candidate <- freq_table %>% count(kmer) %>% filter(n >= t) %>% pull(kmer)
candidate
freq_table %>% filter(kmer %in% candidate)
mydata
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".")
freq_table
