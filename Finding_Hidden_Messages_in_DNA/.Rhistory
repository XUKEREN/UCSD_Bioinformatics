count_T = count_T + 1
}
count_A <- 0
count_T <- 0
count_C <- 0
count_G <- 0
if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[1]] == "A") {
count_A = count_A + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[1]] == "G") {
count_G = count_G + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[1]] == "C") {
count_C = count_C + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[1]] == "T") {
count_T = count_T + 1
}
count_C
motif_matrix[1] %>% str_split(., "") %>% .[[1]]
count_T
dim(motif_matrix)
motif_matrix
length(motif_matrix)
count_A <- vector()
count_T <- vector()
count_C <- vector()
count_G <- vector()
count_T
motif_matrix[1]
length(motif_matrix[1])
nchar(motif_matrix[1])
count_A <- rep(0, nchar(motif_matrix[1]))
count_A
for (j in 1:length(motif_matrix)) {
for (i in 1:nchar(motif_matrix[1])) {
if (motif_matrix[j] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "A") {
count_A[i] = count_A[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "G") {
count_G[i] = count_G[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "C") {
count_C[i] = count_C[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "T") {
count_T[i] = count_T[i] + 1
}
}
}
count_A
motif_count <- cbind(count_A, count_T, count_C, count_G)
motif_count
count_T
count_A <- rep(0, nchar(motif_matrix[1]))
count_T <- rep(0, nchar(motif_matrix[1]))
count_C <- rep(0, nchar(motif_matrix[1]))
count_G <- rep(0, nchar(motif_matrix[1]))
# j is the number of motifs in the matrix
# i is the length of each motif
for (j in 1:length(motif_matrix)) {
for (i in 1:nchar(motif_matrix[1])) {
if (motif_matrix[j] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "A") {
count_A[i] = count_A[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "G") {
count_G[i] = count_G[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "C") {
count_C[i] = count_C[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "T") {
count_T[i] = count_T[i] + 1
}
}
}
motif_count <- cbind(count_A, count_T, count_C, count_G)
motif_matrix <- motif_matrix %>% str_split(., "") %>% as.matrix()
motif_matrix[1,]
motif_count
motif_profile <- motif_count/nchar(motif_matrix[1])
motif_profile
motif_count
motif_score %>% mutate(score = sum(count_A:count_G) - max(count_A:count_G))
motif_score <- motif_count %>%  mutate(score = sum(count_A:count_G) - max(count_A:count_G))
motif_count
motif_score <- motif_count %>% data.frame() %>%  mutate(score = sum(count_A:count_G) - max(count_A:count_G))
motif_count %>% data.frame()
motif_score <- motif_count %>% data.frame() %>% mutate(score = sum(count_A:count_G))
motif_count %>% data.frame()
motif_score <- motif_count %>% data.frame() %>% mutate_at(count_A:count_G, as.numeric)
motif_count %>% data.frame()
motif_count %>% data.frame() %>% View()
rbind(count_A, count_T, count_C, count_G)
motif_count %>% data.frame() %>%
%>% mutate(score = sum(count_A:count_G) - max(count_A:count_G))
motif_count
rbind(count_A, count_T, count_C, count_G) %>% data.frame() %>% colSums()
motif_score <- cbind(count_A, count_T, count_C, count_G) %>% data.frame() %>% rowSums()
motif_score
motif_score <- cbind(count_A, count_T, count_C, count_G) %>% data.frame() %>% mutate( rowsum = rowSums())
motif_score <- cbind(count_A, count_T, count_C, count_G) %>% data.frame() %>% mutate( rowsum = rowSums
motif_score <- cbind(count_A, count_T, count_C, count_G) %>% data.frame() %>% mutate( rowsum = rowSums)
cbind(count_A, count_T, count_C, count_G) %>% data.frame() %>% psum()
cbind(count_A, count_T, count_C, count_G) %>% data.frame() %>% pmax()
cbind(count_A, count_T, count_C, count_G) %>% data.frame()
cbind(count_A, count_T, count_C, count_G) %>% data.frame() %>% pmax()
cbind(count_A, count_T, count_C, count_G) %>% data.frame() %>% do.call(pmax())
cbind(count_A, count_T, count_C, count_G) %>% data.frame() %>% do.call(pmax)
cbind(count_A, count_T, count_C, count_G) %>% data.frame() %>% do.call(.,pmax)
cbind(count_A, count_T, count_C, count_G) %>% data.frame() %>% do.call(pmax, .)
motif_score <- cbind(count_A, count_T, count_C, count_G) %>% data.frame() %>% rowSums  - cbind(count_A, count_T, count_C, count_G) %>% data.frame() %>% do.call(pmax, .)
motif_score
motif_count
motif_consensus <-
motif_count[1]
motif_count[1]
motif_count %>% data.frame()
motif_count %>% data.frame() %>% .[1]
motif_count %>% data.frame() %>% .[,1]
motif_count %>% data.frame() %>% .[1,]
motif_count %>% data.frame() %>% .[1,] %>% pmax()
motif_count %>% data.frame() %>% .[1,] %>% pmax(.)
motif_count %>% data.frame() %>% .[1,] %>% do.call(pmax, .)
motif_count <- cbind(count_A, count_T, count_C, count_G) %>% data.frame()
motif_profile <- motif_count/nchar(motif_matrix[1])
motif_profile
motif_score <- motif_count %>% rowSums  - motif_count %>% do.call(pmax, .)
motif_score
motif_count %>% do.call(pmax, .)
motif_count[which == do.call(pmax, .)]
motif_count %>% .[1,] %>% . [which == do.call(pmax, motif_count%>% .[1,] )]
motif_count %>% .[1,] %>% .[which == do.call(pmax, motif_count%>% .[1,] )]
which(motif_count == max(motif_count))
motif_count == max(motif_count)
max.col(motif_count, 'first')
max.col(motif_count, 'first')
cbind(1:nrow(motif_count), max.col(motif_count, 'first'))
max.col(motif_count)
?factor
motif_count
max.col(motif_count)
motif_count
factor(motif_count, levels = c("1", "2" , "3",   "4"), labels = c("A", "T", "C", "G")))
max.col(motif_count) %>% factor(levels = c("1", "2" , "3",   "4"), labels = c("A", "T", "C", "G")))
max.col(motif_count) %>% factor(., levels = c("1", "2" , "3",   "4"), labels = c("A", "T", "C", "G")))
max.col(motif_count) %>% factor(., levels = c("1", "2" , "3",   "4"), labels = c("A", "T", "C", "G"))
motif_count
motif_profile
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
round(motif_profile, 2)
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
round(motif_profile, 1)
motif_matrix
motif_matrix[1]
motif_count
nchar(motif_matrix[1])
motif_matrix <- c(
"TCATATTTTT",
"CCCTATCCAC",
"GGGGGGGGGG",
"GGGGGGGGGG",
"GTGGGGGGGG",
"GGGGGGGGGT",
"GAAAAAAAAA",
"TCTCCCTTAT",
"TTTTTTTTCA",
"TTTTTTCCTA",
"TATTCCACAC",
"TCCTCCTTCC"
)
count_A <- rep(0, nchar(motif_matrix[1]))
count_T <- rep(0, nchar(motif_matrix[1]))
count_C <- rep(0, nchar(motif_matrix[1]))
count_G <- rep(0, nchar(motif_matrix[1]))
# j is the number of motifs in the matrix
# i is the length of each motif
for (j in 1:length(motif_matrix)) {
for (i in 1:nchar(motif_matrix[1])) {
if (motif_matrix[j] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "A") {
count_A[i] = count_A[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "G") {
count_G[i] = count_G[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "C") {
count_C[i] = count_C[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "T") {
count_T[i] = count_T[i] + 1
}
}
}
motif_matrix
nchar(motif_matrix[1])
nchar(motif_matrix[1])
motif_profile <- motif_count/nchar(motif_matrix[1])
motif_profile
motif_matrix
library(data.table)
library(tidyverse)
motif_matrix <- c(
"TCATATTTTT",
"CCCTATCCAC",
"GGGGGGGGGG",
"GGGGGGGGGG",
"GTGGGGGGGG",
"GGGGGGGGGT",
"GAAAAAAAAA",
"TCTCCCTTAT",
"TTTTTTTTCA",
"TTTTTTCCTA",
"TATTCCACAC",
"TCCTCCTTCC"
)
motif_matrix
count_A <- rep(0, nchar(motif_matrix[1]))
count_T <- rep(0, nchar(motif_matrix[1]))
count_C <- rep(0, nchar(motif_matrix[1]))
count_G <- rep(0, nchar(motif_matrix[1]))
motif_matrix
length(motif_matrix)
motif_count <- cbind(count_A, count_T, count_C, count_G) %>% data.frame()
motif_profile <- motif_count/length(motif_matrix)
motif_score <- motif_count %>% rowSums  - motif_count %>% do.call(pmax, .)
motif_consensus <- max.col(motif_count) %>% factor(., levels = c("1", "2" , "3",   "4"), labels = c("A", "T", "C", "G"))
motif_profile
library(data.table)
library(tidyverse)
motif_matrix <- c(
"TCATATTTTT",
"CCCTATCCAC",
"GGGGGGGGGG",
"GGGGGGGGGG",
"GTGGGGGGGG",
"GGGGGGGGGT",
"GAAAAAAAAA",
"TCTCCCTTAT",
"TTTTTTTTCA",
"TTTTTTCCTA",
"TATTCCACAC",
"TCCTCCTTCC"
)
count_A <- rep(0, nchar(motif_matrix[1]))
count_T <- rep(0, nchar(motif_matrix[1]))
count_C <- rep(0, nchar(motif_matrix[1]))
count_G <- rep(0, nchar(motif_matrix[1]))
# j is the number of motifs in the matrix
# i is the length of each motif
for (j in 1:length(motif_matrix)) {
for (i in 1:nchar(motif_matrix[1])) {
if (motif_matrix[j] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "A") {
count_A[i] = count_A[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "G") {
count_G[i] = count_G[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "C") {
count_C[i] = count_C[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "T") {
count_T[i] = count_T[i] + 1
}
}
}
motif_count <- cbind(count_A, count_T, count_C, count_G) %>% data.frame()
motif_profile <- motif_count/length(motif_matrix)
motif_score <- motif_count %>% rowSums  - motif_count %>% do.call(pmax, .)
motif_consensus <- max.col(motif_count) %>% factor(., levels = c("1", "2" , "3",   "4"), labels = c("A", "T", "C", "G"))
motif_profile
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
round(motif_profile, 1)
round(motif_profile, 1)
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
motif_profile <- round(motif_profile, 1)
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
motif_profile %>% round(1)
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
motif_profile %>% round(1) %>% mutate(entropy = - (count_A*log2(count_A) + count_B*log2(count_B) + count_C*log2(count_C) + count_D*log2(count_D)))
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
motif_profile %>% round(1) %>% mutate(entropy = - (count_A*log2(count_A) + count_B*log2(count_B) + count_C*log2(count_C) + count_D*log2(count_D)))
motif_profile %>% round(1)
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
motif_profile %>% round(1) %>% mutate(entropy = - (count_A*log2(count_A) + count_T*log2(count_T) + count_C*log2(count_C) + count_G*log2(count_G)))
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
motif_profile %>% round(1) %>% mutate(
log2count_A = ifelse(count_A == 0,0,log2(count_A)),
log2count_T = ifelse(count_T == 0,0,log2(count_T)),
log2count_C = ifelse(count_C == 0,0,log2(count_C)),
log2count_G = ifelse(count_G == 0,0,log2(count_G)),
entropy = - (count_A*log2count_A + count_T*log2count_T + count_C*log2count_C + count_G*log2count_G))
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
motif_profile %>% round(1) %>% mutate(
log2count_A = ifelse(count_A == 0,0,log2(count_A)),
log2count_T = ifelse(count_T == 0,0,log2(count_T)),
log2count_C = ifelse(count_C == 0,0,log2(count_C)),
log2count_G = ifelse(count_G == 0,0,log2(count_G)),
entropy = - (count_A*log2count_A + count_T*log2count_T + count_C*log2count_C + count_G*log2count_G)) %>% colsum()entropy
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
motif_profile %>% round(1) %>% mutate(
log2count_A = ifelse(count_A == 0,0,log2(count_A)),
log2count_T = ifelse(count_T == 0,0,log2(count_T)),
log2count_C = ifelse(count_C == 0,0,log2(count_C)),
log2count_G = ifelse(count_G == 0,0,log2(count_G)),
entropy = - (count_A*log2count_A + count_T*log2count_T + count_C*log2count_C + count_G*log2count_G)) %>% colsum(entropy)
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
motif_profile %>% round(1) %>% mutate(
log2count_A = ifelse(count_A == 0,0,log2(count_A)),
log2count_T = ifelse(count_T == 0,0,log2(count_T)),
log2count_C = ifelse(count_C == 0,0,log2(count_C)),
log2count_G = ifelse(count_G == 0,0,log2(count_G)),
entropy = - (count_A*log2count_A + count_T*log2count_T + count_C*log2count_C + count_G*log2count_G)) %>% colSum(entropy)
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
motif_profile %>% round(1) %>% mutate(
log2count_A = ifelse(count_A == 0,0,log2(count_A)),
log2count_T = ifelse(count_T == 0,0,log2(count_T)),
log2count_C = ifelse(count_C == 0,0,log2(count_C)),
log2count_G = ifelse(count_G == 0,0,log2(count_G)),
entropy = - (count_A*log2count_A + count_T*log2count_T + count_C*log2count_C + count_G*log2count_G)) %>% colSumsx(entropy)
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
motif_profile %>% round(1) %>% mutate(
log2count_A = ifelse(count_A == 0,0,log2(count_A)),
log2count_T = ifelse(count_T == 0,0,log2(count_T)),
log2count_C = ifelse(count_C == 0,0,log2(count_C)),
log2count_G = ifelse(count_G == 0,0,log2(count_G)),
entropy = - (count_A*log2count_A + count_T*log2count_T + count_C*log2count_C + count_G*log2count_G)) %>% colSums(entropy)
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
motif_profile %>% round(1) %>% mutate(
log2count_A = ifelse(count_A == 0,0,log2(count_A)),
log2count_T = ifelse(count_T == 0,0,log2(count_T)),
log2count_C = ifelse(count_C == 0,0,log2(count_C)),
log2count_G = ifelse(count_G == 0,0,log2(count_G)),
entropy = - (count_A*log2count_A + count_T*log2count_T + count_C*log2count_C + count_G*log2count_G)) %>% colSums(.$entropy)
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
motif_profile %>% round(1) %>% mutate(
log2count_A = ifelse(count_A == 0,0,log2(count_A)),
log2count_T = ifelse(count_T == 0,0,log2(count_T)),
log2count_C = ifelse(count_C == 0,0,log2(count_C)),
log2count_G = ifelse(count_G == 0,0,log2(count_G)),
entropy = - (count_A*log2count_A + count_T*log2count_T + count_C*log2count_C + count_G*log2count_G)) %>% pull(entropy) %>% sum()
motif_profile
for (i in 1:nchar(motif_matrix[1])) {
for (j in 1:length(motif_matrix)) {
if (motif_matrix[j] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "A") {
count_A[i] = count_A[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "G") {
count_G[i] = count_G[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "C") {
count_C[i] = count_C[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "T") {
count_T[i] = count_T[i] + 1
}
}
}
motif_count
library(data.table)
library(tidyverse)
motif_matrix <- c(
"TCATATTTTT",
"CCCTATCCAC",
"GGGGGGGGGG",
"GGGGGGGGGG",
"GTGGGGGGGG",
"GGGGGGGGGT",
"GAAAAAAAAA",
"TCTCCCTTAT",
"TTTTTTTTCA",
"TTTTTTCCTA",
"TATTCCACAC",
"TCCTCCTTCC"
)
count_A <- rep(0, nchar(motif_matrix[1]))
count_T <- rep(0, nchar(motif_matrix[1]))
count_C <- rep(0, nchar(motif_matrix[1]))
count_G <- rep(0, nchar(motif_matrix[1]))
# j is the number of motifs in the matrix
# i is the length of each motif
for (i in 1:nchar(motif_matrix[1])) {
for (j in 1:length(motif_matrix)) {
if (motif_matrix[j] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "A") {
count_A[i] = count_A[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "G") {
count_G[i] = count_G[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "C") {
count_C[i] = count_C[i] + 1
} else if (motif_matrix[1] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "T") {
count_T[i] = count_T[i] + 1
}
}
}
motif_matrix
motif_count <- cbind(count_A, count_T, count_C, count_G) %>% data.frame()
motif_count
motif_matrix <- c(
"TCATATTTTT",
"CCCTATCCAC",
"GGGGGGGGGG",
"GGGGGGGGGG",
"GTGGGGGGGG",
"GGGGGGGGGT",
"GAAAAAAAAA",
"TCTCCCTTAT",
"TTTTTTTTCA",
"TTTTTTCCTA",
"TATTCCACAC",
"TCCTCCTTCC"
)
count_A <- rep(0, nchar(motif_matrix[1]))
count_T <- rep(0, nchar(motif_matrix[1]))
count_C <- rep(0, nchar(motif_matrix[1]))
count_G <- rep(0, nchar(motif_matrix[1]))
count_A <- rep(0, nchar(motif_matrix[1]))
count_T <- rep(0, nchar(motif_matrix[1]))
count_C <- rep(0, nchar(motif_matrix[1]))
count_G <- rep(0, nchar(motif_matrix[1]))
# j is the number of motifs in the matrix
# i is the length of each motif
for (i in 1:nchar(motif_matrix[1])) {
for (j in 1:length(motif_matrix)) {
if (motif_matrix[j] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "A") {
count_A[i] = count_A[i] + 1
} else if (motif_matrix[j] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "G") {
count_G[i] = count_G[i] + 1
} else if (motif_matrix[j] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "C") {
count_C[i] = count_C[i] + 1
} else if (motif_matrix[j] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "T") {
count_T[i] = count_T[i] + 1
}
}
}
motif_count <- cbind(count_A, count_T, count_C, count_G) %>% data.frame()
motif_profile <- motif_count/length(motif_matrix)
motif_score <- motif_count %>% rowSums  - motif_count %>% do.call(pmax, .)
motif_consensus <- max.col(motif_count) %>% factor(., levels = c("1", "2" , "3",   "4"), labels = c("A", "T", "C", "G"))
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
motif_profile %>% round(1) %>% mutate(
log2count_A = ifelse(count_A == 0,0,log2(count_A)),
log2count_T = ifelse(count_T == 0,0,log2(count_T)),
log2count_C = ifelse(count_C == 0,0,log2(count_C)),
log2count_G = ifelse(count_G == 0,0,log2(count_G)),
entropy = - (count_A*log2count_A + count_T*log2count_T + count_C*log2count_C + count_G*log2count_G)) %>% pull(entropy) %>% sum()
motif_profile
motif_count
motif_profile %>% round(1)
motif_profile %>% round(1) %>% mutate(
log2count_A = ifelse(count_A == 0,0,log2(count_A)),
log2count_T = ifelse(count_T == 0,0,log2(count_T)),
log2count_C = ifelse(count_C == 0,0,log2(count_C)),
log2count_G = ifelse(count_G == 0,0,log2(count_G)),
entropy = - (count_A*log2count_A + count_T*log2count_T + count_C*log2count_C + count_G*log2count_G)) %>% pull(entropy) %>% sum()
score <- -(8*0.1*log2(0.1) + 4*0.2*log2(0.2) + 2*0.3*log2(0.3) + 3*0.4*log2(0.4) + 1*0.5*log2(0.5) + 2*0.6*log2(0.6) + 2*0.7*log2(0.7) + 1*0.8*log2(0.8) + 3*0.9*log2(0.9))
score
motif_profile %>% round(1) %>% count(0.1)
1:length(motif_matrix)
length(motif_matrix)
1:length(motif_matrix)
motif_matrix
motif_matrix <- c(
"TCATATTTTT",
"CCCTATCCAC",
"GGGGGGGGGG",
"GGGGGGGGGG",
"GTGGGGGGGG",
"GGGGGGGGGT",
"GAAAAAAAAA",
"TCTCCCTTAT",
"TTTTTTTTCA",
"TTTTTTCCTA",
"TATTCCACAC",
"TCCTCCTTCC"
)
length(motif_matrix)
motif_matrix
library(data.table)
library(tidyverse)
motif_matrix <- c(
"TCGGGGGTTTTT",
"CCGGTGACTTAC",
"ACGGGGATTTTC",
"TTGGGGACTTTT",
"AAGGGGACTTCC",
"TTGGGGACTTCC",
"TCGGGGATTCAT",
"TCGGGGATTCCT",
"TAGGGGAACTAC",
"TCGGGTATAACC"
)
count_A <- rep(0, nchar(motif_matrix[1]))
count_T <- rep(0, nchar(motif_matrix[1]))
count_C <- rep(0, nchar(motif_matrix[1]))
count_G <- rep(0, nchar(motif_matrix[1]))
# j is the number of motifs in the matrix
# i is the length of each motif
for (i in 1:nchar(motif_matrix[1])) {
for (j in 1:length(motif_matrix)) {
if (motif_matrix[j] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "A") {
count_A[i] = count_A[i] + 1
} else if (motif_matrix[j] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "G") {
count_G[i] = count_G[i] + 1
} else if (motif_matrix[j] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "C") {
count_C[i] = count_C[i] + 1
} else if (motif_matrix[j] %>% str_split(., "") %>% .[[1]] %>% .[[i]] == "T") {
count_T[i] = count_T[i] + 1
}
}
}
motif_count <- cbind(count_A, count_T, count_C, count_G) %>% data.frame()
motif_profile <- motif_count/length(motif_matrix)
motif_score <- motif_count %>% rowSums  - motif_count %>% do.call(pmax, .)
motif_consensus <- max.col(motif_count) %>% factor(., levels = c("1", "2" , "3",   "4"), labels = c("A", "T", "C", "G"))
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
motif_profile %>% round(1) %>% mutate(
log2count_A = ifelse(count_A == 0,0,log2(count_A)),
log2count_T = ifelse(count_T == 0,0,log2(count_T)),
log2count_C = ifelse(count_C == 0,0,log2(count_C)),
log2count_G = ifelse(count_G == 0,0,log2(count_G)),
entropy = - (count_A*log2count_A + count_T*log2count_T + count_C*log2count_C + count_G*log2count_G)) %>% pull(entropy) %>% sum()
motif_entropy <- sum()
score <- -(8*0.1*log2(0.1) + 4*0.2*log2(0.2) + 2*0.3*log2(0.3) + 3*0.4*log2(0.4) + 1*0.5*log2(0.5) + 2*0.6*log2(0.6) + 2*0.7*log2(0.7) + 1*0.8*log2(0.8) + 3*0.9*log2(0.9))
motif_profile %>% round(1) %>% count(0.1)
# the entropy of a motif matrix is defined as the sum of the entropies of its columns
motif_profile %>% round(1) %>% mutate(
log2count_A = ifelse(count_A == 0,0,log2(count_A)),
log2count_T = ifelse(count_T == 0,0,log2(count_T)),
log2count_C = ifelse(count_C == 0,0,log2(count_C)),
log2count_G = ifelse(count_G == 0,0,log2(count_G)),
entropy = - (count_A*log2count_A + count_T*log2count_T + count_C*log2count_C + count_G*log2count_G)) %>% pull(entropy) %>% sum()
