Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
vector_motif_int
mystring
length(mystring)
motif_vector[1] <- c(mystring[1] %>% str_split(., "") %>% .[[1]] %>% .[1:k]%>% paste(collapse = ""))
for (i in 2:length(mystring)) {
# create profile for the current motif_vector
profile <- profile_motif(motif_vector) %>% t()
rownames(profile) <- c("A", "T", "C", "G")
# find out the profile_most_probable motif
# find out the profile_most_probable motif from the next Dna string
mystr <- mystring[i] %>% str_split(., "") %>% .[[1]]
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
motif_vector[i] <- mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
}
motif_vector
motif_vector
motif_vector[1] <- c(mystring[1] %>% str_split(., "") %>% .[[1]] %>% .[1:k]%>% paste(collapse = ""))
2:length(mystring)
profile <- profile_motif(motif_vector) %>% t()
rownames(profile) <- c("A", "T", "C", "G")
# find out the profile_most_probable motif
# find out the profile_most_probable motif from the next Dna string
mystr <- mystring[2] %>% str_split(., "") %>% .[[1]]
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
motif_vector[i] <- mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
motif_vector
motif_vector <- vector()
motif_vector[1] <- c(mystring[1] %>% str_split(., "") %>% .[[1]] %>% .[1:k]%>% paste(collapse = ""))
profile <- profile_motif(motif_vector) %>% t()
rownames(profile) <- c("A", "T", "C", "G")
# find out the profile_most_probable motif
# find out the profile_most_probable motif from the next Dna string
mystr <- mystring[2] %>% str_split(., "") %>% .[[1]]
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
motif_vector[2] <- mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
motif_vector
profile <- profile_motif(motif_vector) %>% t()
rownames(profile) <- c("A", "T", "C", "G")
# find out the profile_most_probable motif
# find out the profile_most_probable motif from the next Dna string
mystr <- mystring[3] %>% str_split(., "") %>% .[[1]]
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
motif_vector[3] <- mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
motif_vector
profile <- profile_motif(motif_vector) %>% t()
rownames(profile) <- c("A", "T", "C", "G")
# find out the profile_most_probable motif
# find out the profile_most_probable motif from the next Dna string
mystr <- mystring[4] %>% str_split(., "") %>% .[[1]]
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
motif_vector[4] <- mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
motif_vector
profile <- profile_motif(motif_vector) %>% t()
rownames(profile) <- c("A", "T", "C", "G")
# find out the profile_most_probable motif
# find out the profile_most_probable motif from the next Dna string
mystr <- mystring[5] %>% str_split(., "") %>% .[[1]]
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
motif_vector[5] <- mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
motif_vector
motif_vector <- vector()
motif_vector[1] <- c(mystring[1] %>% str_split(., "") %>% .[[1]] %>% .[1:k]%>% paste(collapse = ""))
for (i in 2:length(mystring)) {
# create profile for the current motif_vector
profile <- profile_motif(motif_vector) %>% t()
rownames(profile) <- c("A", "T", "C", "G")
# find out the profile_most_probable motif
# find out the profile_most_probable motif from the next Dna string
mystr <- mystring[i] %>% str_split(., "") %>% .[[1]]
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
motif_vector[i] <- mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
}
motif_vector
motif_vector
motif_vector <- vector()
motif_vector[1] <- c(mystring[1] %>% str_split(., "") %>% .[[1]] %>% .[1:k]%>% paste(collapse = ""))
for (i in 2:length(mystring)) {
# create profile for the current motif_vector
profile <- profile_motif(motif_vector) %>% t()
rownames(profile) <- c("A", "T", "C", "G")
# find out the profile_most_probable motif
# find out the profile_most_probable motif from the next Dna string
mystr <- mystring[i] %>% str_split(., "") %>% .[[1]]
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
motif_vector[i] <- mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
motif_vector
}
motif_vector <- vector()
motif_vector[1] <- c(mystring[1] %>% str_split(., "") %>% .[[1]] %>% .[1:k]%>% paste(collapse = ""))
for (i in 2:length(mystring)) {
# create profile for the current motif_vector
profile <- profile_motif(motif_vector) %>% t()
rownames(profile) <- c("A", "T", "C", "G")
# find out the profile_most_probable motif
# find out the profile_most_probable motif from the next Dna string
mystr <- mystring[i] %>% str_split(., "") %>% .[[1]]
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
motif_vector[i] <- mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
}
motif_vector <- vector()
motif_vector[1] <- c(mystring[1] %>% str_split(., "") %>% .[[1]] %>% .[1:k]%>% paste(collapse = ""))
for (a in 2:length(mystring)) {
# create profile for the current motif_vector
profile <- profile_motif(motif_vector) %>% t()
rownames(profile) <- c("A", "T", "C", "G")
# find out the profile_most_probable motif
# find out the profile_most_probable motif from the next Dna string
mystr <- mystring[i] %>% str_split(., "") %>% .[[1]]
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
motif_vector[a] <- mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
}
motif_vector <- vector()
motif_vector[1] <- c(mystring[1] %>% str_split(., "") %>% .[[1]] %>% .[1:k]%>% paste(collapse = ""))
for (a in 2:length(mystring)) {
# create profile for the current motif_vector
profile <- profile_motif(motif_vector) %>% t()
rownames(profile) <- c("A", "T", "C", "G")
# find out the profile_most_probable motif
# find out the profile_most_probable motif from the next Dna string
mystr <- mystring[a] %>% str_split(., "") %>% .[[1]]
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
motif_vector[a] <- mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
}
motif_vector
mystring
first_DNA_string <- c(mystring[1] %>% str_split(., "") %>% .[[1]] %>% .[1:k]%>% paste(collapse = ""))
first_DNA_string
first_DNA_string <- mystring[1] %>% str_split(., "") %>% .[[1]]
first_DNA_string
# create a place holder list
first_DNA_string_kmer <- vector(mode = "list", length = (length(first_DNA_string) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(first_DNA_string) - k + 1)) {
first_DNA_string_kmer[[i]] <- first_DNA_string[i:(i + k - 1)]
}
first_DNA_string_kmer
motif_vector
profile_extractor <- function(kmer) {
motif_vector <- vector()
motif_vector[1] <- kmer %>% paste(collapse = ""))
for (a in 2:length(mystring)) {
# create profile for the current motif_vector
profile <- profile_motif(motif_vector) %>% t()
rownames(profile) <- c("A", "T", "C", "G")
# find out the profile_most_probable motif
# find out the profile_most_probable motif from the next Dna string
mystr <- mystring[a] %>% str_split(., "") %>% .[[1]]
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
motif_vector[a] <- mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
}
return(motif_vector)
}
profile_extractor <- function(kmer) {
motif_vector <- vector()
motif_vector[1] <- kmer %>% paste(collapse = ""))
for (a in 2:length(mystring)) {
# create profile for the current motif_vector
profile <- profile_motif(motif_vector) %>% t()
rownames(profile) <- c("A", "T", "C", "G")
# find out the profile_most_probable motif
# find out the profile_most_probable motif from the next Dna string
mystr <- mystring[a] %>% str_split(., "") %>% .[[1]]
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
motif_vector[a] <- mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
}
return(motif_vector)
}
profile_extractor <- function(kmer) {
motif_vector <- vector()
motif_vector[1] <- kmer %>% paste(collapse = ""))
for (a in 2:length(mystring)) {
# create profile for the current motif_vector
profile <- profile_motif(motif_vector) %>% t()
rownames(profile) <- c("A", "T", "C", "G")
# find out the profile_most_probable motif
# find out the profile_most_probable motif from the next Dna string
mystr <- mystring[a] %>% str_split(., "") %>% .[[1]]
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
motif_vector[a] <- mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
}
}
kmer <- first_DNA_string_kmer[[1]]
kmer
motif_vector <- vector()
motif_vector[1] <- kmer %>% paste(collapse = ""))
for (a in 2:length(mystring)) {
# create profile for the current motif_vector
profile <- profile_motif(motif_vector) %>% t()
rownames(profile) <- c("A", "T", "C", "G")
# find out the profile_most_probable motif
# find out the profile_most_probable motif from the next Dna string
mystr <- mystring[a] %>% str_split(., "") %>% .[[1]]
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
motif_vector[a] <- mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
}
kmer
profile_extractor <- function(kmer) {
motif_vector <- vector()
motif_vector[1] <- kmer %>% paste(collapse = "")
for (a in 2:length(mystring)) {
# create profile for the current motif_vector
profile <- profile_motif(motif_vector) %>% t()
rownames(profile) <- c("A", "T", "C", "G")
# find out the profile_most_probable motif
# find out the profile_most_probable motif from the next Dna string
mystr <- mystring[a] %>% str_split(., "") %>% .[[1]]
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
motif_vector[a] <- mylist[which(myprob_vector == max(myprob_vector))] %>% .[[1]] %>% paste(collapse = "")
}
return(motif_vector)
}
profile_extractor(first_DNA_string_kmer[[1]])
first_DNA_string_kmer %>% map(profile_extractor)
best_motifs_int
# get all the motif profiles
first_DNA_string_kmer %>% map(profile_extractor) %>% map(score_motif)
# get all the motif profiles
first_DNA_string_kmer %>% map(profile_extractor) %>% map(score_motif) %>% min()
# get all the motif profiles and calculate the score
first_DNA_string_kmer %>% map(profile_extractor) %>% map(score_motif) %>% unlist()
# get all the motif profiles and calculate the score
final_score_vector <- first_DNA_string_kmer %>% map(profile_extractor) %>% map(score_motif) %>% unlist()
final_score_vector
final_score_vector[which(final_score_vector == min(final_score_vector))]
which(final_score_vector == min(final_score_vector))
# get all the motif profiles and calculate the score
final_motif_vector <- first_DNA_string_kmer %>% map(profile_extractor)
final_motif_vector
profile_extractor[which(final_score_vector == min(final_score_vector))]
profile_extractor
final_score_vector[[which(final_score_vector == min(final_score_vector))]]
final_motif_vector[[which(final_score_vector == min(final_score_vector))]]
final_motif_vector[[which(final_score_vector == min(final_score_vector))]] %>% noquote()
final_score_vector[[which(final_score_vector == min(final_score_vector))]]
score_motif_int
# check the minimum score to see if its smaller than score_motif_int
score_motif_int
final_score_vector[which(final_score_vector == min(final_score_vector))]
best_motifs_int
if (score_motif_int <= final_score_vector[which(final_score_vector == min(final_score_vector))]) {
print(best_motifs_int)
} else {
print(final_motif_vector[[which(final_score_vector == min(final_score_vector))]] %>% noquote())
}
fread("dataset_159_5")
