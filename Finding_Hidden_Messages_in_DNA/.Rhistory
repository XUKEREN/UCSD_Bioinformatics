title.position = "top", title.hjust = 0.5, title = "PRS\nSpearman Correlation")) + scale_y_discrete(position = "right")
# library
library(tidyverse)
library(data.table)
library(corrplot)
library(knitr)
library(scales)
library(Hmisc)
library(wesanderson)
library(reshape2)
library(pals)
library(ggpubr)
library(ggbeeswarm)
df_master <- fread("df_master.txt")
# the last day of the vaccine data is 11/24
df_master %>% select(c("state", "county", "date", "Series_Complete_Pop_Pct")) %>% filter(!is.na(Series_Complete_Pop_Pct)) %>% arrange(desc(date))
top10_vaccine <- df_master %>% select(c("state", "county", "date", "Series_Complete_Pop_Pct")) %>% filter(date == "2021-11-24") %>%
group_by(state) %>%
dplyr::summarize(avg_vaccine_state = mean(Series_Complete_Pop_Pct, na.rm = T)) %>%
arrange(desc(avg_vaccine_state)) %>% pull(state) %>% .[1:10]
top10_vaccine
mylist <- df_master %>% filter(state %in% top10_vaccine) %>% filter(date == "2021-11-24") %>% group_by(state) %>% group_split()
find_top5_county <- function(df) {
# find the first 5 counties
df<- df %>% arrange(desc(Series_Complete_Pop_Pct))
# extract state name and county name
data.frame(
state = df %>% pull(state) %>% .[1:5],
county = df %>%  distinct(county) %>% pull(county) %>% .[1:5]
)
}
top50_counties <- mylist %>% map(find_top5_county) %>% rbindlist()
df_top_vaccine <- top50_counties %>% left_join(df_master, by = c("state", "county"))
df_top_vaccine
top50_counties
# the last day of the vaccine data is 11/24
df_master %>% select(c("state", "county", "date", "Series_Complete_Pop_Pct")) %>% filter(!is.na(Series_Complete_Pop_Pct)) %>% arrange(desc(date))
bottomb10_vaccine <- df_master %>% select(c("state", "county", "date", "Series_Complete_Pop_Pct")) %>% filter(!state %in% c("Alaska", "Hawaii", "Virgin Islands")) %>% filter(date == "2021-11-24") %>%
group_by(state) %>%
dplyr::summarize(avg_vaccine_state = mean(Series_Complete_Pop_Pct, na.rm = T)) %>%
arrange(avg_vaccine_state) %>% pull(state) %>% .[1:10]
mylist <- df_master %>% filter(state %in% bottomb10_vaccine) %>% filter(date == "2021-11-24") %>% group_by(state) %>% group_split()
find_bottom5_county <- function(df) {
# find the first 5 counties
df<- df %>% arrange(desc(Series_Complete_Pop_Pct))
# extract state name and county name
data.frame(
state = df %>% pull(state) %>% .[1:5],
county = df %>%  distinct(county) %>% pull(county) %>% .[1:5]
)
}
bottom50_counties <- mylist %>% map(find_bottom5_county) %>% rbindlist()
bottom50_counties
top50_counties <- top50_counties %>% mutate(group = "top_vaccine")
bottom50_counties <- bottom50_counties %>% mutate(group = "bottom_vaccine")
couties_to_compare <- rbind(top50_counties, bottom50_counties)
couties_to_compare
df_couties_to_compare <- couties_to_compare %>% left_join(df_master, by = c("state", "county"))
df_couties_to_compare
df_couties_to_compare %>% names()
# using t.test
t.test(median_incomeE ~ group, df_couties_to_compare)
df_couties_to_compare %>%
ggplot(aes(x = median_incomeE, group = as.factor(group), fill = as.factor(group))) + geom_density(alpha = 0.8) + theme(legend.position = c(0.8, 0.8)) +guides(fill = guide_legend(title="")) + labs(title = "Density plot", y = "Density", x = "median_income") + scale_fill_manual(values = c("#D55E00","#0072B2")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
)
df_couties_to_compare %>% ggboxplot( x = "group", y = "median_incomeE",
color = "group",
add = "jitter", size = 0.5, add.params = list(size = 0.5)) + theme(legend.position = "none") +
labs(
title = "Boxplot",
x = "Vaccine group",
y = "median_incomeE"
) + scale_color_manual(values = c("#D55E00","#0072B2"))+
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
annotate(
"text", label = "T-test, p = 1.3e-40",
x = 1.8, y = 2.2, size = 4
)
# using t.test
t.test(median_incomeE ~ group, df_couties_to_compare)
# boxplot
df_couties_to_compare %>% ggboxplot( x = "group", y = "median_incomeE",
color = "group",
add = "jitter", size = 0.5, add.params = list(size = 0.5)) + theme(legend.position = "none") +
labs(
title = "Boxplot",
x = "Vaccine group",
y = "median_incomeE"
) + scale_color_manual(values = c("#D55E00","#0072B2"))+
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
annotate(
"text", label = "T-test, p-value < 2.2e-16 ",
x = 1.8, y = 2.2, size = 4
) + scale_y_continuous(limits = c(-0.6, 2.3))
# boxplot
df_couties_to_compare %>% ggboxplot( x = "group", y = "median_incomeE",
color = "group",
add = "jitter", size = 0.5, add.params = list(size = 0.5)) + theme(legend.position = "none") +
labs(
title = "Boxplot",
x = "Vaccine group",
y = "median_incomeE"
) + scale_color_manual(values = c("#D55E00","#0072B2"))+
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
annotate(
"text", label = "T-test, p-value < 2.2e-16 ",
x = 1.8, y = 2.2, size = 4
)
df_couties_to_compare %>% ggplot(aes(group, median_incomeE)) + geom_quasirandom(aes(color = group)) +
labs(
title = "Boxplot",
x = "Vaccine group",
y = "median_incomeE"
) + scale_color_manual(values = c("#D55E00","#0072B2")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
annotate(
"text", label = "T-test, p-value < 2.2e-16",
x = 1.8, y = 2.2, size = 4
)
theme_set(theme_minimal())
df_couties_to_compare %>% ggplot(aes(group, median_incomeE)) + geom_quasirandom(aes(color = group)) +
labs(
title = "Boxplot",
x = "Vaccine group",
y = "median_incomeE"
) + scale_color_manual(values = c("#D55E00","#0072B2")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
annotate(
"text", label = "T-test, p-value < 2.2e-16",
x = 1.8, y = 2.2, size = 4
)
theme_set(theme_classic())
df_couties_to_compare %>% ggplot(aes(group, median_incomeE)) + geom_quasirandom(aes(color = group)) +
labs(
title = "Boxplot",
x = "Vaccine group",
y = "median_incomeE"
) + scale_color_manual(values = c("#D55E00","#0072B2")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
annotate(
"text", label = "T-test, p-value < 2.2e-16",
x = 1.8, y = 2.2, size = 4
)
theme_set(theme_light())
df_couties_to_compare %>% ggplot(aes(group, median_incomeE)) + geom_quasirandom(aes(color = group)) +
labs(
title = "Boxplot",
x = "Vaccine group",
y = "median_incomeE"
) + scale_color_manual(values = c("#D55E00","#0072B2")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
annotate(
"text", label = "T-test, p-value < 2.2e-16",
x = 1.8, y = 2.2, size = 4
)
theme_set(theme_pubr())
df_couties_to_compare %>% ggplot(aes(group, median_incomeE)) + geom_quasirandom(aes(color = group)) +
labs(
title = "Boxplot",
x = "Vaccine group",
y = "median_incomeE"
) + scale_color_manual(values = c("#D55E00","#0072B2")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
annotate(
"text", label = "T-test, p-value < 2.2e-16",
x = 1.8, y = 2.2, size = 4
)
# make plots
df_couties_to_compare %>%
ggplot(aes(x = median_incomeE, group = as.factor(group), fill = as.factor(group))) + geom_density(alpha = 0.8) + theme(legend.position = c(0.8, 0.8)) +guides(fill = guide_legend(title="")) + labs(title = "Density plot", y = "Density", x = "median_income") + scale_fill_manual(values = c("#D55E00","#0072B2")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
)
# boxplot
df_couties_to_compare %>% ggboxplot( x = "group", y = "median_incomeE",
color = "group",
add = "jitter", size = 0.5, add.params = list(size = 0.5)) + theme(legend.position = "none") +
labs(
title = "Boxplot",
x = "Vaccine group",
y = "median_incomeE"
) + scale_color_manual(values = c("#D55E00","#0072B2"))+
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
annotate(
"text", label = "T-test, p-value < 2.2e-16 ",
x = 1.8, y = 2.2, size = 4
)
ggplot(mpg,aes(class, hwy)) + geom_quasirandom()
# ggbeeswarm
# https://github.com/eclarke/ggbeeswarm
df_couties_to_compare %>% ggplot(aes(group, median_incomeE)) + geom_quasirandom(aes(color = group)) +
labs(
title = "Boxplot",
x = "Vaccine group",
y = "median_incomeE"
) + scale_color_manual(values = c("#D55E00","#0072B2")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
annotate(
"text", label = "T-test, p-value < 2.2e-16",
x = 1.8, y = 2.2, size = 4
)
# make plots
p1 <- df_couties_to_compare %>%
ggplot(aes(x = median_incomeE, group = as.factor(group), fill = as.factor(group))) + geom_density(alpha = 0.8) + theme(legend.position = c(0.8, 0.8)) +guides(fill = guide_legend(title="")) + labs(title = "Density plot", y = "Density", x = "median_income") + scale_fill_manual(values = c("#D55E00","#0072B2")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
)
View(df_couties_to_compare)
p2 <- df_couties_to_compare %>% ggplot(aes(group, median_incomeE)) + geom_quasirandom(aes(color = group)) +
labs(
title = "Boxplot",
x = "Vaccine group",
y = "median_incomeE"
) + scale_color_manual(values = c("#D55E00","#0072B2")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
annotate(
"text", label = "T-test, p-value < 2.2e-16",
x = 1.8, y = 2.2, size = 4
)
p1 + p2
library(patchwork)
p1 + p2
# boxplot
df_couties_to_compare %>% ggboxplot( x = "group", y = "median_incomeE",
color = "group",
add = "jitter", size = 0.5, add.params = list(size = 0.5)) + theme(legend.position = "none") +
labs(
title = "Boxplot",
x = "Vaccine group",
y = "median_incomeE"
) + scale_color_manual(values = c("#D55E00","#0072B2"))+
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
annotate(
"text", label = "T-test, p-value < 2.2e-16 ",
x = 1.8, y = 2.2, size = 4
)
p2
p1 + p2
df_couties_to_compare %>% names()
t.test(`>=highschool`~ group, df_couties_to_compare)
# make plots
p1 <- df_couties_to_compare %>%
ggplot(aes(x = `>=highschool`, group = as.factor(group), fill = as.factor(group))) + geom_density(alpha = 0.8) + theme(legend.position = c(0.8, 0.8)) +guides(fill = guide_legend(title="")) + labs(title = "Density plot", y = "Density", x = ">=highschool") + scale_fill_manual(values = c("#D55E00","#0072B2")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
)
p2 <- df_couties_to_compare %>% ggplot(aes(group, `>=highschool`)) + geom_quasirandom(aes(color = group)) +
labs(
title = "Boxplot",
x = "Vaccine group",
y = ">=highschool"
) + scale_color_manual(values = c("#D55E00","#0072B2")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
annotate(
"text", label = "T-test, p-value < 2.2e-16",
x = 1.8, y = 2.2, size = 4
)
p1 + p2
# make plots
p1 <- df_couties_to_compare %>%
ggplot(aes(x = `>=highschool`, group = as.factor(group), fill = as.factor(group))) + geom_density(alpha = 0.8) + theme(legend.position = c(0.2, 0.8)) +guides(fill = guide_legend(title="")) + labs(title = "Density plot", y = "Density", x = ">=highschool") + scale_fill_manual(values = c("#D55E00","#0072B2")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
)
p2 <- df_couties_to_compare %>% ggplot(aes(group, `>=highschool`)) + geom_quasirandom(aes(color = group)) +
labs(
title = "beeswarm",
x = "Vaccine group",
y = ">=highschool"
) + scale_color_manual(values = c("#D55E00","#0072B2")) +
theme(
plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
plot.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
annotate(
"text", label = "T-test, p-value < 2.2e-16",
x = 1.8, y = 2.2, size = 4
) + scale_y_continuous(limits = c(75, 100))
p1 + p2
# read dataset
mydata = fread("Salmonella_enterica.txt", stringsAsFactors = F, header = F, fill = T)
mydata
mydata = fread("Salmonella_enterica.txt", stringsAsFactors = F, header = F, fill = T)
mydata = fread("Salmonella_enterica.txt")
mydata
mydata = readLines("Salmonella_enterica.txt")
mydata
readLines("Salmonella_enterica.txt")[-1]
mydata = readLines("Salmonella_enterica.txt")[-1] %>% str_c()
mydata
class(mydata)
length(mydata)
mydata = readLines("Salmonella_enterica.txt")[-1]
length(mydata)
mydata %>% str_split(., "")
str(mydata)
mydata %>% paste0(collapse = "")
# Concatenate a vector of strings/character
mydata <- mydata %>% paste0(collapse = "")
mydata %>% str_split(., "")
# split strings to characters
mystring <- mydata %>% str_split(., "") %>% .[[1]]
# create the skew_c_g function
skew_c_g <- function(input) {
# split the input string to a genome vector
genome <- input %>% str_split(., "") %>% .[[1]]
# create an empty output vector
output_vector <- vector()
# create the initial value of the output vector
output_vector[1] <- 0
for (i in 1:length(genome)) {
# check to see if the first element of the pattern matches any elements of the string
if (genome[i] %in% c("A", "T")) {
output_vector[i+1] <- output_vector[i]
} else if (genome[i] %in% c("C")) {
output_vector[i+1] <- output_vector[i] - 1
} else if (genome[i] %in% c("G")) {
output_vector[i+1] <- output_vector[i] + 1
}
}
return(output_vector)
}
# create the skew_c_g function
skew_c_g <- function(input) {
# split the input string to a genome vector
genome <- input %>% str_split(., "") %>% .[[1]]
# create an empty output vector
output_vector <- vector()
# create the initial value of the output vector
output_vector[1] <- 0
for (i in 1:length(genome)) {
# check to see if the first element of the pattern matches any elements of the string
if (genome[i] %in% c("A", "T")) {
output_vector[i+1] <- output_vector[i]
} else if (genome[i] %in% c("C")) {
output_vector[i+1] <- output_vector[i] - 1
} else if (genome[i] %in% c("G")) {
output_vector[i+1] <- output_vector[i] + 1
}
}
return(output_vector)
}
# apply the function to Salmonella_enterica
skew_c_g(mydata)
# apply the function to Salmonella_enterica
ori_location <- skew_c_g(mydata)
ori_location
ori_location[which(ori_location == min(ori_location))]
which(ori_location == min(ori_location))
which(ori_location == min(ori_location))
mydata
mywindow <- mystring[(3764857-500):(3764857+500)]
mywindow
k <- 9
d <- 1
# find all the k-mers
# create a place holder list
kmer_list <- vector(mode = "list", length = (length(mystring) - as.numeric(k) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystring) - as.numeric(k) + 1)) {
kmer_list[[i]] <- mystring[i:(i + as.numeric(k) - 1)]
}
# find all the reverse complement for the k-mers
## create a function to find  the reverse complement for a pattern
reverse_c <- function(mystring) {
# create a place holder list
reversecomplement <- vector(mode = "list", length = length(mystring))
# add complement
for (i in 1:length(mystring)) {
if (mystring[i] == "A") {
reversecomplement[[i]] <- "T"
} else if (mystring[i] == "T") {
reversecomplement[[i]] <- "A"
} else if (mystring[i] == "G") {
reversecomplement[[i]] <- "C"
} else if (mystring[i] == "C") {
reversecomplement[[i]] <- "G"
} else {
reversecomplement[[i]] <- "N"
}
}
# collapse all the letters and get the reversed vector
myreversecomplement <- reversecomplement %>% unlist() %>% rev()
return(myreversecomplement)
}
# collapse all the letters and get the reversed vector
myreversecomplement <- reversecomplement %>% unlist() %>% rev() %>% str_c(collapse = "")
# create a place holder list
kmer_list_reverse_c <- vector(mode = "list", length = (length(mystring) - as.numeric(k) + 1))
for (i in 1:(length(mystring) - as.numeric(k) + 1)) {
kmer_list_reverse_c[[i]] <- reverse_c(kmer_list[[i]])
}
# merge all the Kmers and their reverse complement
kmer_list <- c(kmer_list, kmer_list_reverse_c)
# find all the mismatch patterns for the k-mers
###############################################
# initiate a Neighborhood list
Neighborhood <- list()
# create a ImmediateNeighbor function to generate 1-neigborhood of Pattern
ImmediateNeighbors <- function(pattern) {
for (i in 1:length(pattern)) {
symbol <- pattern[i]
nucleotide <- c("A", "C", "G", "T")
diff_nucleotide <- nucleotide[which(nucleotide!=symbol)] # find all the different nucleotide
for (j in 1:length(diff_nucleotide)) {
pattern_tmp <- pattern
pattern[i] <- diff_nucleotide[j] # find all the different patterns than the original pattern
Neighborhood[[length(diff_nucleotide)*(i-1) + j ]] <- pattern # assign the pattern to the output Neighborhood list
pattern <- pattern_tmp
}
}
Neighborhood <- c(Neighborhood, list(pattern))
return(Neighborhood)
}
# calculate all mismatch with hamming dist 1. then compute new mismatch with ham dist 1 from prev mismatch and recurse till d.
Neighbors <- function(pattern, d) {
Neighborhood <- ImmediateNeighbors(pattern)
if (length(pattern) == 1) {
Neighborhood # all the output should be in the list format
} else if (length(pattern) > 1) {
if (d == 0) {
Neighborhood = list(pattern) # all the output should be in the list format
} else if (d == 1) {
Neighborhood # all the output should be in the list format
} else if (d > 1) {
for (i in 1:(d-1)) {
Neighborhood <- Neighborhood %>% map(ImmediateNeighbors) %>% flatten() %>% unique() # all the output should be in the list format
}
}
}
return(Neighborhood)
}
HammingDistance <- function(string1, string2) {
# compare two vectors
if (is.na((string1==string2) %>% table() %>% .["FALSE"])){
return(0) # if the two vectors are the exact same, then return 0
} else {
return((string1==string2) %>% table() %>% .["FALSE"])
}
}
kmer_Neighborhood <- list()
for (i in 1:length(kmer_list)) {
kmer_Neighborhood[[i]] <- Neighbors(kmer_list[[i]], d) %>% map(paste, collapse="") %>% do.call(rbind, .) %>% as.data.frame()
}
kmer_Neighborhood_freq_table <- kmer_Neighborhood %>% unlist() %>% data.frame() %>% table()
which(kmer_Neighborhood_freq_table == max(kmer_Neighborhood_freq_table)) %>% names() %>% data.frame() %>% fwrite("test.results.txt")
kmer_Neighborhood_freq_table
