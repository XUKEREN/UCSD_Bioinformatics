filter(`.` ==  "TTGCAGCTT") %>%
mutate(index = as.numeric(rowname) - 1) %>%
pull(index) %>% str_c(., collapse = "/t")
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
filter(`.` ==  "TTGCAGCTT") %>%
mutate(index = as.numeric(rowname) - 1) %>%
pull(index) %>% str_c(., collapse = "\t")
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
filter(`.` ==  "TTGCAGCTT") %>%
mutate(index = as.numeric(rowname) - 1) %>%
pull(index) %>% str_c(., collapse = " ")
# Code Challenge: Solve the Pattern Matching Problem.
# Input: Two strings, Pattern and Genome.
# Output: A collection of space-separated integers specifying all starting positions where Pattern appears as a substring of Genome.
# load packages
library(data.table)
library(tidyverse)
# read dataset
mydata = fread('dataset_3_5.txt', stringsAsFactors = F, header = F)
# split strings to characters
mypattern <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
mygenome <- mydata[2,1] %>% pull() %>% str_split(., "") %>% .[[1]]
# create a place holder list
mylist <- vector(mode = "list", length = (length(mygenome) - length(mypattern) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mygenome) - length(mypattern) + 1)) {
mylist[[i]] <- mygenome[i:(i + length(mypattern) - 1)]
}
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
filter(`.` ==  "TTGCAGCTT") %>%
mutate(index = as.numeric(rowname) - 1) %>%
pull(index) %>% str_c(., collapse = " ")
# Code Challenge: Solve the Pattern Matching Problem.
# Input: Two strings, Pattern and Genome.
# Output: A collection of space-separated integers specifying all starting positions where Pattern appears as a substring of Genome.
# load packages
library(data.table)
library(tidyverse)
# read dataset
mydata = fread('dataset_3_5.txt', stringsAsFactors = F, header = F)
# split strings to characters
mypattern <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
mygenome <- mydata[2,1] %>% pull() %>% str_split(., "") %>% .[[1]]
# create a place holder list
mylist <- vector(mode = "list", length = (length(mygenome) - length(mypattern) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mygenome) - length(mypattern) + 1)) {
mylist[[i]] <- mygenome[i:(i + length(mypattern) - 1)]
}
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
filter(`.` ==  str_c(mypattern, collapse = "")) %>%
mutate(index = as.numeric(rowname) - 1) %>%
pull(index) %>% str_c(., collapse = " ")
mydata = fread('Vibrio_cholerae.txt', stringsAsFactors = F, header = F)
mydata
# split strings to characters
mypattern <- c("CTTGATCAT") %>% str_split(., "") %>% .[[1]]
mypattern
dim(mydata)
mygenome <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
mygenome
mylist <- vector(mode = "list", length = (length(mygenome) - length(mypattern) + 1))
for (i in 1:(length(mygenome) - length(mypattern) + 1)) {
mylist[[i]] <- mygenome[i:(i + length(mypattern) - 1)]
}
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
filter(`.` ==  str_c(mypattern, collapse = "")) %>%
mutate(index = as.numeric(rowname) - 1) %>%
pull(index) %>% str_c(., collapse = " ")
# read dataset
mydata = fread('dataset_4_5.txt', stringsAsFactors = F, header = F)
mydata
# read dataset
mydata = fread('dataset_4_5.txt', stringsAsFactors = F, header = F)
mydata
# read dataset
mydata = fread('dataset_4_5.txt', stringsAsFactors = F, header = F, fill = T)
mydata
dim(mydata)
# read dataset
mydata = fread('dataset_4_5.txt', stringsAsFactors = F, header = F, fill = T)
mystr
mydata[2,1] %>% pull()
mydata[2,1] %>% pull() %>% str_split(., " ")
k <- mydata[2,1] %>% pull() %>% str_split(., " ") %>% .[[1]] %>% .[1]
k
L <- mydata[2,1] %>% pull() %>% str_split(., " ") %>% .[[1]] %>% .[2]
t <- mydata[2,1] %>% pull() %>% str_split(., " ") %>% .[[1]] %>% .[3]
mylist <- vector(mode = "list", length = (length(mystr) - as.numeric(k) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - as.numeric(k) + 1)) {
mylist[[i]] <- mystr[i:(i + as.numeric(k) - 1)]
}
mylist
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
table()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>% table()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column()
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>% count(.)
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>% count(`.`)
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>% names()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>% names() %>% count(`.`)
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>% count(`.`)
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame()
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column()
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>% count(".")
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>% freq(".")
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".")
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".") %>% count(kmer)
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".") %>% count(kmer) %>% filter(n >= t)
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".") %>% count(kmer) %>% filter(n >= t) %>% pull(kmer)
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".") %>% count(kmer) %>% filter(n >= t) %>% pull(kmer) -> candidate
candidate
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column()
# calculate freq for each k-mer and print out the most frequent k-mer
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column()
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".")
freq_table
freq_table %>% count(kmer) %>% filter(n >= t) %>% pull(kmer) -> candidate
candidate
freq_table %>% filter(kmer %in% candidate)
freq_table %>% filter(kmer %in% candidate) %>% group_by(kmer) %>% mutate(rowname = as.numeric(rowname)) %>% summarize(window = )
freq_table %>% filter(kmer %in% candidate) %>% group_by(kmer) %>% mutate(rowname = as.numeric(rowname))
freq_table %>% filter(kmer %in% candidate) %>% group_by(kmer) %>% mutate(rowname = as.numeric(rowname)) %>% summarize(window = range(rowname))
freq_table %>% filter(kmer %in% candidate) %>% group_by(kmer) %>% mutate(rowname = as.numeric(rowname)) %>% summarize(window = max(rowname) - min(rowname))
freq_table %>% filter(kmer %in% candidate) %>% group_by(kmer) %>% mutate(rowname = as.numeric(rowname)) %>% summarize(window = max(rowname) - min(rowname) + 1)
freq_table %>% filter(kmer %in% candidate) %>% group_by(kmer) %>% mutate(rowname = as.numeric(rowname)) %>% summarize(window = max(rowname) - min(rowname) + 1)
freq_table %>% filter(kmer %in% candidate) %>% group_by(kmer) %>% mutate(rowname = as.numeric(rowname)) %>% summarize(window = max(rowname) - min(rowname) + 1) %>% filter(window <= L)
L
k
L
t
mydata = fread('dataset_4_5.txt', stringsAsFactors = F, header = F, fill = T)
# split strings to characters
mystr <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
k <- mydata[2,1] %>% pull() %>% str_split(., " ") %>% .[[1]] %>% .[1]
L <- mydata[2,1] %>% pull() %>% str_split(., " ") %>% .[[1]] %>% .[2]
t <- mydata[2,1] %>% pull() %>% str_split(., " ") %>% .[[1]] %>% .[3]
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - as.numeric(k) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - as.numeric(k) + 1)) {
mylist[[i]] <- mystr[i:(i + as.numeric(k) - 1)]
}
mylist
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".")
freq_table
freq_table %>% count(kmer)
freq_table %>% count(kmer) %>% filter(n >= t)
freq_table %>% count(kmer) %>% filter(n > t)
candidate <- freq_table %>% count(kmer) %>% filter(n >= t) %>% pull(kmer)
candidate
freq_table %>% filter(kmer %in% candidate)
mydata
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".")
freq_table
library(data.table)
library(tidyverse)
# read dataset
mydata = fread("E_coli.txt", stringsAsFactors = F, header = F, fill = T)
# split strings to characters
mystr <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
mystr
k <- 9
L <- 500
t <- 3
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - L + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
# calculate freq for each k-mer and print out the most frequent k-mer
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("patterns" = ".") %>%
mutate(rowname = as.numeric(rowname))
candidates <- freq_table %>% count(patterns) %>% filter(n >= t) %>% pull(patterns)
# create a place holder list
mylist2 <- vector(mode = "list", length = length(candidates))
for (i in 1:length(candidates)) {
# create functions to get window size for each candidate
window_diff <- freq_table %>% filter(patterns == candidates[i]) %>% pull(rowname) %>% diff()
for (j in 1:length(window_diff)) {
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
mylist2[[i]] <- candidates[i]
} else {
next;
}
}
}
#  How many different 9-mers form (500,3)-clumps in the E. coli genome? (In other words, do not count a 9-mer more than once.)
# load packages
library(data.table)
library(tidyverse)
# read dataset
mydata = fread("E_coli.txt", stringsAsFactors = F, header = F, fill = T)
# split strings to characters
mystr <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
k <- 9
L <- 500
t <- 3
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - L + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
# calculate freq for each k-mer and print out the most frequent k-mer
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("patterns" = ".") %>%
mutate(rowname = as.numeric(rowname))
candidates <- freq_table %>% count(patterns) %>% filter(n >= t) %>% pull(patterns)
candidates
length(candidates)
mylist2
candidates
# optimized version
freq_table %>% filter(patterns %in% candidates)
# optimized version
freq_table %>% filter(patterns %in% candidates) %>% group_by(patterns)
freq_table
freq_table %>% filter(patterns %in% candidates)
candidates
freq_table %>% filter(patterns %in% candidates)
# optimized version
freq_table %>% filter(patterns %in% candidates) %>% group_by(patterns) %>% group_split()
# optimized version
list_candidate_index <- freq_table %>% filter(patterns %in% candidates) %>% group_by(patterns) %>% group_split()
list_candidate_index
list_candidate_index[[1]]
list_candidate_index[[1]] %>% dim()
list_candidate_index[[1]] %>% nrow()
1:(list_candidate_index[[1]] %>% nrow())
1:(list_candidate_index[[1]] %>% nrow()) %>% map(function(j) {
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return("TRUE")
} else {
next;
}
})
list_candidate_index[[1]] %>% diff()
list_candidate_index[[1]]
list_candidate_index[[1]] %>% diff(rowname)
window_diff <- list_candidate_index[[1]] %>% pull(rowname) %>% diff()
window_diff
1:(list_candidate_index[[1]] %>% nrow()) %>% map(function(j) {
window_diff <- list_candidate_index[[1]] %>% pull(rowname) %>% diff()
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return("TRUE")
} else {
next;
}
})
1:(list_candidate_index[[1]] %>% nrow()) %>% map(function(j) {
window_diff <- list_candidate_index[[1]] %>% pull(rowname) %>% diff()
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return("TRUE")
} else {
return("FALSE")
}
})
1:(list_candidate_index[[1]] %>% nrow()) %>% map(function(j) {
window_diff <- list_candidate_index[[1]] %>% pull(rowname) %>% diff()
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return("TRUE")
}
})
1:(list_candidate_index[[1]] %>% nrow()) %>% map(function(j) {
window_diff <- list_candidate_index[[1]] %>% pull(rowname) %>% diff()
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return(list_candidate_index[[1]] %>% .[2,1])
}
})
return(list_candidate_index[[1]] %>% .[2,1])
list_candidate_index[[1]] %>% .[2,1]
list_candidate_index[[1]] %>% .[2,1] %>% class()
list_candidate_index[[1]] %>% pull(patterns) %>% .[1]
list_candidate_index
list_candidate_index[[1]]
1:(list_candidate_index[[1]] %>% nrow()) %>% map(function(j) {
window_diff <- list_candidate_index[[1]] %>% pull(rowname) %>% diff()
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return(list_candidate_index[[1]] %>% pull(patterns) %>% .[1])
}
})
list_candidate_index
df <- list_candidate_index[[1]]
df
1:(df %>% nrow()) %>% map(function(j) {
window_diff <- df %>% pull(rowname) %>% diff()
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return(df %>% pull(patterns) %>% .[1])
}
})
list_candidate_index %>% map(
function(df) {
1:(df %>% nrow()) %>% map(function(j) {
window_diff <- df %>% pull(rowname) %>% diff()
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return(df %>% pull(patterns) %>% .[1])
}
})
}
)
list_final <- list_candidate_index %>% map(
function(df) {
1:(df %>% nrow()) %>% map(function(j) {
window_diff <- df %>% pull(rowname) %>% diff()
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return(df %>% pull(patterns) %>% .[1])
}
})
}
)
list_candidate_index
list_candidate_index %>% map(function(df) {%>% pull(rowname) %>% diff()})
list_candidate_index %>% map(function(df) { df%>% pull(rowname) %>% diff()})
# load packages
library(data.table)
library(tidyverse)
# read dataset
mydata = fread("E_coli.txt", stringsAsFactors = F, header = F, fill = T)
# split strings to characters
mystr <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
k <- 9
L <- 500
t <- 3
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - L + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
# calculate freq for each k-mer and print out the most frequent k-mer
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("patterns" = ".") %>%
mutate(rowname = as.numeric(rowname))
candidates <- freq_table %>% count(patterns) %>% filter(n >= t) %>% pull(patterns)
freq_table
freq_table %>% filter(patterns %in% candidates)
# optimized version
list_candidate_index <- freq_table %>% filter(patterns %in% candidates) %>% group_by(patterns) %>% group_split()
list_candidate_index
list_candidate_index %>% map(function(df) { df$diff <- df %>% pull(rowname) %>% diff()})
list_candidate_index %>% map(function(df) { df %>% pull(rowname) %>% diff()})
list_candidate_index_diff <- list_candidate_index %>% map(function(df) { df %>% pull(rowname) %>% diff()})
list_candidate_index_diff
list_candidate_index_diff[[1]]
test <- list_candidate_index_diff[[1]]
length(test[test>5])
length(test[test <= l])
length(test[test <= L])
list_small_window <- list_candidate_index %>% map(function(x) {length(x[x <= L])})
list_small_window
list_small_window %>% unlist()
list_small_window %>% unlist() %>% data.table()
list_small_window %>% unlist() %>% data.table() %>% filter("." >0)
list_small_window %>% unlist() %>% data.table(var)
list_small_window %>% unlist() %>% data.table("number" = ".")
list_small_window %>% unlist() %>% data.table() %>% rename( "n_small_window"= ".")
list_small_window %>% unlist() %>% data.table() %>% rename( "n_small_window"= ".") %>% filter(n_small_window>0)
