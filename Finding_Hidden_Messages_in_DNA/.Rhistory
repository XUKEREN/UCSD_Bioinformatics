k <- mydata[2,1] %>% pull() %>% str_split(., " ") %>% .[[1]] %>% .[1]
L <- mydata[2,1] %>% pull() %>% str_split(., " ") %>% .[[1]] %>% .[2]
t <- mydata[2,1] %>% pull() %>% str_split(., " ") %>% .[[1]] %>% .[3]
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - as.numeric(k) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - as.numeric(k) + 1)) {
mylist[[i]] <- mystr[i:(i + as.numeric(k) - 1)]
}
mylist
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".")
freq_table
freq_table %>% count(kmer)
freq_table %>% count(kmer) %>% filter(n >= t)
freq_table %>% count(kmer) %>% filter(n > t)
candidate <- freq_table %>% count(kmer) %>% filter(n >= t) %>% pull(kmer)
candidate
freq_table %>% filter(kmer %in% candidate)
mydata
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("kmer" = ".")
freq_table
library(data.table)
library(tidyverse)
# read dataset
mydata = fread("E_coli.txt", stringsAsFactors = F, header = F, fill = T)
# split strings to characters
mystr <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
mystr
k <- 9
L <- 500
t <- 3
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - L + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
# calculate freq for each k-mer and print out the most frequent k-mer
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("patterns" = ".") %>%
mutate(rowname = as.numeric(rowname))
candidates <- freq_table %>% count(patterns) %>% filter(n >= t) %>% pull(patterns)
# create a place holder list
mylist2 <- vector(mode = "list", length = length(candidates))
for (i in 1:length(candidates)) {
# create functions to get window size for each candidate
window_diff <- freq_table %>% filter(patterns == candidates[i]) %>% pull(rowname) %>% diff()
for (j in 1:length(window_diff)) {
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
mylist2[[i]] <- candidates[i]
} else {
next;
}
}
}
#  How many different 9-mers form (500,3)-clumps in the E. coli genome? (In other words, do not count a 9-mer more than once.)
# load packages
library(data.table)
library(tidyverse)
# read dataset
mydata = fread("E_coli.txt", stringsAsFactors = F, header = F, fill = T)
# split strings to characters
mystr <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
k <- 9
L <- 500
t <- 3
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - L + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
# calculate freq for each k-mer and print out the most frequent k-mer
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("patterns" = ".") %>%
mutate(rowname = as.numeric(rowname))
candidates <- freq_table %>% count(patterns) %>% filter(n >= t) %>% pull(patterns)
candidates
length(candidates)
mylist2
candidates
# optimized version
freq_table %>% filter(patterns %in% candidates)
# optimized version
freq_table %>% filter(patterns %in% candidates) %>% group_by(patterns)
freq_table
freq_table %>% filter(patterns %in% candidates)
candidates
freq_table %>% filter(patterns %in% candidates)
# optimized version
freq_table %>% filter(patterns %in% candidates) %>% group_by(patterns) %>% group_split()
# optimized version
list_candidate_index <- freq_table %>% filter(patterns %in% candidates) %>% group_by(patterns) %>% group_split()
list_candidate_index
list_candidate_index[[1]]
list_candidate_index[[1]] %>% dim()
list_candidate_index[[1]] %>% nrow()
1:(list_candidate_index[[1]] %>% nrow())
1:(list_candidate_index[[1]] %>% nrow()) %>% map(function(j) {
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return("TRUE")
} else {
next;
}
})
list_candidate_index[[1]] %>% diff()
list_candidate_index[[1]]
list_candidate_index[[1]] %>% diff(rowname)
window_diff <- list_candidate_index[[1]] %>% pull(rowname) %>% diff()
window_diff
1:(list_candidate_index[[1]] %>% nrow()) %>% map(function(j) {
window_diff <- list_candidate_index[[1]] %>% pull(rowname) %>% diff()
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return("TRUE")
} else {
next;
}
})
1:(list_candidate_index[[1]] %>% nrow()) %>% map(function(j) {
window_diff <- list_candidate_index[[1]] %>% pull(rowname) %>% diff()
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return("TRUE")
} else {
return("FALSE")
}
})
1:(list_candidate_index[[1]] %>% nrow()) %>% map(function(j) {
window_diff <- list_candidate_index[[1]] %>% pull(rowname) %>% diff()
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return("TRUE")
}
})
1:(list_candidate_index[[1]] %>% nrow()) %>% map(function(j) {
window_diff <- list_candidate_index[[1]] %>% pull(rowname) %>% diff()
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return(list_candidate_index[[1]] %>% .[2,1])
}
})
return(list_candidate_index[[1]] %>% .[2,1])
list_candidate_index[[1]] %>% .[2,1]
list_candidate_index[[1]] %>% .[2,1] %>% class()
list_candidate_index[[1]] %>% pull(patterns) %>% .[1]
list_candidate_index
list_candidate_index[[1]]
1:(list_candidate_index[[1]] %>% nrow()) %>% map(function(j) {
window_diff <- list_candidate_index[[1]] %>% pull(rowname) %>% diff()
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return(list_candidate_index[[1]] %>% pull(patterns) %>% .[1])
}
})
list_candidate_index
df <- list_candidate_index[[1]]
df
1:(df %>% nrow()) %>% map(function(j) {
window_diff <- df %>% pull(rowname) %>% diff()
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return(df %>% pull(patterns) %>% .[1])
}
})
list_candidate_index %>% map(
function(df) {
1:(df %>% nrow()) %>% map(function(j) {
window_diff <- df %>% pull(rowname) %>% diff()
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return(df %>% pull(patterns) %>% .[1])
}
})
}
)
list_final <- list_candidate_index %>% map(
function(df) {
1:(df %>% nrow()) %>% map(function(j) {
window_diff <- df %>% pull(rowname) %>% diff()
if (sum(window_diff[j:(j+t-2)]) <= L && !is.na(sum(window_diff[j:(j+t-2)]))) {
return(df %>% pull(patterns) %>% .[1])
}
})
}
)
list_candidate_index
list_candidate_index %>% map(function(df) {%>% pull(rowname) %>% diff()})
list_candidate_index %>% map(function(df) { df%>% pull(rowname) %>% diff()})
# load packages
library(data.table)
library(tidyverse)
# read dataset
mydata = fread("E_coli.txt", stringsAsFactors = F, header = F, fill = T)
# split strings to characters
mystr <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
k <- 9
L <- 500
t <- 3
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - L + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
# calculate freq for each k-mer and print out the most frequent k-mer
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("patterns" = ".") %>%
mutate(rowname = as.numeric(rowname))
candidates <- freq_table %>% count(patterns) %>% filter(n >= t) %>% pull(patterns)
freq_table
freq_table %>% filter(patterns %in% candidates)
# optimized version
list_candidate_index <- freq_table %>% filter(patterns %in% candidates) %>% group_by(patterns) %>% group_split()
list_candidate_index
list_candidate_index %>% map(function(df) { df$diff <- df %>% pull(rowname) %>% diff()})
list_candidate_index %>% map(function(df) { df %>% pull(rowname) %>% diff()})
list_candidate_index_diff <- list_candidate_index %>% map(function(df) { df %>% pull(rowname) %>% diff()})
list_candidate_index_diff
list_candidate_index_diff[[1]]
test <- list_candidate_index_diff[[1]]
length(test[test>5])
length(test[test <= l])
length(test[test <= L])
list_small_window <- list_candidate_index %>% map(function(x) {length(x[x <= L])})
list_small_window
list_small_window %>% unlist()
list_small_window %>% unlist() %>% data.table()
list_small_window %>% unlist() %>% data.table() %>% filter("." >0)
list_small_window %>% unlist() %>% data.table(var)
list_small_window %>% unlist() %>% data.table("number" = ".")
list_small_window %>% unlist() %>% data.table() %>% rename( "n_small_window"= ".")
list_small_window %>% unlist() %>% data.table() %>% rename( "n_small_window"= ".") %>% filter(n_small_window>0)
# load packages
library(data.table)
library(tidyverse)
# read dataset
mydata = fread("E_coli.txt", stringsAsFactors = F, header = F, fill = T)
# split strings to characters
mystr <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
k <- 9
L <- 500
t <- 3
mystr
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - L + 1))
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
freq_table <- mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
rename("patterns" = ".") %>%
mutate(rowname = as.numeric(rowname))
candidates <- freq_table %>% count(patterns) %>% filter(n >= t) %>% pull(patterns)
candidates
# optimized version
list_candidate_index <- freq_table %>% filter(patterns %in% candidates) %>% group_by(patterns) %>% group_split()
list_candidate_index
list_candidate_index_diff <- list_candidate_index %>% map(function(df) { df %>% pull(rowname) %>% diff()})
list_small_window <- list_candidate_index_diff %>% map(function(x) {length(x[x <= L])})
list_small_window
list_small_window %>% unlist() %>% data.table() %>% rename( "n_small_window"= ".") %>% filter(n_small_window>0)
list_candidate_index_diff
list_small_window
list_candidate_index_diff
list_candidate_index_diff[[1]]
list_candidate_index_diff[[1]]
list_candidate_index_diff[[50]]
df <- list_candidate_index_diff[[50]]
df
1:length(df)
df[3]
find_small_window <- function(index) {
df <- list_candidate_index_diff[[index]]
for(i in 1:length(df)){
if (df[i] + df[i+1] + k < L) {
return(index)
}
}
}
list_candidate_index_diff
mylist.final <- list_candidate_index_diff %>% map(find_small_window)
list_candidate_index_diff
1:length(list_candidate_index_diff)
find_small_window <- function(index) {
df <- list_candidate_index_diff[[index]]
for(i in 1:length(df)){
if (df[i] + df[i+1] + k < L && !is.na(df[i+1] )) {
return(index)
}
}
}
mylist.final <- 1:length(list_candidate_index_diff) %>% map(find_small_window)
mylist.final
mylist.final %>% unlist()
mylist.final
mylist.final %>% unlist()
mylist.final %>% unlist() %>% data.table()
mylist.final %>% unlist() %>% data.table() %>% nrow()
find_small_window <- function(index) {
df <- list_candidate_index_diff[[index]]
for(i in 1:length(df)){
if (df[i] + df[i+1] + k - 1 < L && !is.na(df[i+1] )) {
return(index)
}
}
}
find_small_window
mylist.final <- 1:length(list_candidate_index_diff) %>% map(find_small_window)
mylist.final %>% unlist() %>% data.table() %>% nrow()
knitr::opts_chunk$set(echo = TRUE)
df_demographics <- fread("df_demographics_final_county.csv")
df_demographics
df_demographics %>% separate(NAME, c("county", "state"), sep = ", ")
df_demographics %>% separate(NAME, c("county", "state"), sep = ", ") %>% filter(state == "Louisiana")
df_demographics %>% separate(NAME, c("county", "state"), sep = ", ") %>% filter(state == "New York") %>% filter(county %in% c('Queens County', 'Richmond County', 'Bronx County','Kings County', 'New York County'))
study_period
fwrite(df_master, "df_master.csv", sep = "\t")
# load packages
library(data.table)
library(tidyverse)
# read dataset
mydata = fread('dataset_2_6.txt', stringsAsFactors = F, header = F)
# split strings to characters
mypattern <- mydata[2,1] %>% pull() %>% str_split(., "") %>% .[[1]]
mystr <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
# initalize the number of matched pattern = 0
npattern=0
# for loop to count the matched patterns
for (i in 1:length(mystr)) {
# check to see if the first element of the pattern matches any elements of the string
if (mystr[i] == mypattern[1]) {
# if these is match for the first element, then check the following elements
nequal = 1
for (j in 1:(length(mypattern) - 1)) {
if (mystr[i+j] == mypattern[1+j] && !is.na(mystr[i+j])) {nequal = nequal + 1}
else {
break;
}}
if (nequal == length(mypattern)) {
npattern = npattern + 1;
} else {
next;
}
} else {
next;
}
}
print(npattern)
# read dataset
mydata = fread('dataset_2_6.txt', stringsAsFactors = F, header = F)
mypattern
mydata[2,1]
# split strings to characters
mypattern <- c("GACCATCAAAACTGATAAACTACTTAAAAATCAGT") %>% str_split(., "") %>% .[[1]]
mypattern
# load packages
library(data.table)
library(tidyverse)
# read dataset
# split strings to characters
mypattern <- c("GACCATCAAAACTGATAAACTACTTAAAAATCAGT") %>% str_split(., "") %>% .[[1]]
mystr <- c("AAA") %>% str_split(., "") %>% .[[1]]
# initalize the number of matched pattern = 0
npattern=0
# for loop to count the matched patterns
for (i in 1:length(mystr)) {
# check to see if the first element of the pattern matches any elements of the string
if (mystr[i] == mypattern[1]) {
# if these is match for the first element, then check the following elements
nequal = 1
for (j in 1:(length(mypattern) - 1)) {
if (mystr[i+j] == mypattern[1+j] && !is.na(mystr[i+j])) {nequal = nequal + 1}
else {
break;
}}
if (nequal == length(mypattern)) {
npattern = npattern + 1;
} else {
next;
}
} else {
next;
}
}
print(npattern)
c("AAA") %>% str_split(., "") %>% .[[1]]
c("GACCATCAAAACTGATAAACTACTTAAAAATCAGT") %>% str_split(., "") %>% .[[1]]
# split strings to characters
mypattern <- c("GACCATCAAAACTGATAAACTACTTAAAAATCAGT") %>% str_split(., "") %>% .[[1]]
mystr <- c("AAA") %>% str_split(., "") %>% .[[1]]
# initalize the number of matched pattern = 0
npattern=0
# for loop to count the matched patterns
for (i in 1:length(mystr)) {
# check to see if the first element of the pattern matches any elements of the string
if (mystr[i] == mypattern[1]) {
# if these is match for the first element, then check the following elements
nequal = 1
for (j in 1:(length(mypattern) - 1)) {
if (mystr[i+j] == mypattern[1+j] && !is.na(mystr[i+j])) {nequal = nequal + 1}
else {
break;
}}
if (nequal == length(mypattern)) {
npattern = npattern + 1;
} else {
next;
}
} else {
next;
}
}
print(npattern)
# read dataset
mydata = fread('dataset_2_13.txt', stringsAsFactors = F, header = F)
# split strings to characters
mystr <- mydata[1,1] %>% pull() %>% str_split(., "") %>% .[[1]]
myk <- mydata[2,1] %>% pull()
myk
myk <- 3
myk
myk <- "3"
myk
# split strings to characters
mystr <- c("TAAACGTGAGAGAAACGTGCTGATTACACTTGTTCGTGTGGTAT") %>% str_split(., "") %>% .[[1]]
# split strings to characters
mystr <- c("TAAACGTGAGAGAAACGTGCTGATTACACTTGTTCGTGTGGTAT") %>% str_split(., "") %>% .[[1]]
myk <- "3"
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - as.numeric(myk) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - as.numeric(myk) + 1)) {
mylist[[i]] <- mystr[i:(i + as.numeric(myk) - 1)]
}
# calculate freq for each k-mer and print out the most frequent k-mer
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
table() %>%
data.frame() %>%
filter(Freq == max(Freq)) %>%
pull(1)
# load packages
library(data.table)
library(tidyverse)
# read dataset
# split strings to letters
mystr <- c("GATTACA") %>% str_split(., "") %>% .[[1]]
# create a place holder list
mylist <- vector(mode = "list", length = length(mystr))
# add complement
for (i in 1:length(mystr)) {
if (mystr[i] == "A") {
mylist[[i]] <- "T"
} else if (mystr[i] == "T") {
mylist[[i]] <- "A"
} else if (mystr[i] == "G") {
mylist[[i]] <- "C"
} else if (mystr[i] == "C") {
mylist[[i]] <- "G"
} else {
mylist[[i]] <- "N"
}
}
# collapse all the letters and get the reversed vector
mylist %>% unlist() %>% rev() %>% str_c(collapse = "")
# Code Challenge: Solve the Pattern Matching Problem.
# Input: Two strings, Pattern and Genome.
# Output: A collection of space-separated integers specifying all starting positions where Pattern appears as a substring of Genome.
# load packages
library(data.table)
library(tidyverse)
# split strings to characters
mypattern <- c("CGC") %>% str_split(., "") %>% .[[1]]
mygenome <- c("ATGACTTCGCTGTTACGCGC") %>% str_split(., "") %>% .[[1]]
# create a place holder list
mylist <- vector(mode = "list", length = (length(mygenome) - length(mypattern) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mygenome) - length(mypattern) + 1)) {
mylist[[i]] <- mygenome[i:(i + length(mypattern) - 1)]
}
# find the matched k-mers and their index, index should minus 1
mylist %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
data.frame() %>%
rownames_to_column() %>%
filter(`.` ==  str_c(mypattern, collapse = "")) %>%
mutate(index = as.numeric(rowname) - 1) %>%
pull(index) %>% str_c(., collapse = " ")
