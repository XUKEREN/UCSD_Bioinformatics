which(HammingDistance_summary == min(HammingDistance_summary))
which(HammingDistance_summary == min(HammingDistance_summary)) %>% min()
# find the first index that gives the minmum HammingDistance
min_index <- which(HammingDistance_summary == min(HammingDistance_summary)) %>% min()
mylist[min_index]
# find the minimum value of the HammingDistance
min(HammingDistance_summary)
# find the minimum value of the HammingDistance
min_value <- min(HammingDistance_summary)
min_value
mylist[min_index]
# find the k-mer that gave the minmum value
mylist[min_index] %>% pull()
# find the k-mer that gave the minmum value
mylist[min_index] %>% .[[1]]
# find the k-mer that gave the minmum value
mylist[[min_index]]
# find the k-mer that gave the minmum value
min_string <- mylist[[min_index]]
DistanceBetweenPatternAndStrings_summary <- c(min_value = min_value, min_index = min_index, min_string = min_string)
DistanceBetweenPatternAndStrings_summary
# create a list to hold the results
DistanceBetweenPatternAndStrings_summary_list <- list()
DistanceBetweenPatternAndStrings_summary_list
length(Dna)
DistanceBetweenPatternAndStrings_summary <- function(pattern, Dna) {
# create a list to hold the results
DistanceBetweenPatternAndStrings_summary_list <- list()
for (S in 1:length(Dna)) {
mystr <- Dna[S] %>% str_split(., "") %>% .[[1]]
myk <- nchar(pattern)
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - as.numeric(myk) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - as.numeric(myk) + 1)) {
mylist[[i]] <- mystr[i:(i + as.numeric(myk) - 1)]
}
HammingDistance_summary <- vector()
for (i in 1:length(mylist)) {
HammingDistance_summary[i] <- HammingDistance(mylist[[i]], pattern)
}
HammingDistance_summary[which(HammingDistance_summary == min(HammingDistance_summary))]
# find the minimum value of the HammingDistance
min_value <- min(HammingDistance_summary)
# find the first index that gives the minmum HammingDistance
min_index <- which(HammingDistance_summary == min(HammingDistance_summary)) %>% min()
# find the k-mer that gave the minmum value
min_string <- mylist[[min_index]]
min_df <- c(min_value = min_value, min_index = min_index, min_string = min_string)
DistanceBetweenPatternAndStrings_summary_list[[S]] <- min_df
}
}
DistanceBetweenPatternAndStrings_summary("AAA", c("TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT"))
DistanceBetweenPatternAndStrings_summary_list
DistanceBetweenPatternAndStrings_summary <- function(pattern, Dna) {
# create a list to hold the results
DistanceBetweenPatternAndStrings_summary_list <- list()
for (S in 1:length(Dna)) {
mystr <- Dna[S] %>% str_split(., "") %>% .[[1]]
myk <- nchar(pattern)
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - as.numeric(myk) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - as.numeric(myk) + 1)) {
mylist[[i]] <- mystr[i:(i + as.numeric(myk) - 1)]
}
HammingDistance_summary <- vector()
for (i in 1:length(mylist)) {
HammingDistance_summary[i] <- HammingDistance(mylist[[i]], pattern)
}
HammingDistance_summary[which(HammingDistance_summary == min(HammingDistance_summary))]
# find the minimum value of the HammingDistance
min_value <- min(HammingDistance_summary)
# find the first index that gives the minmum HammingDistance
min_index <- which(HammingDistance_summary == min(HammingDistance_summary)) %>% min()
# find the k-mer that gave the minmum value
min_string <- mylist[[min_index]]
min_df <- c(min_value = min_value, min_index = min_index, min_string = min_string)
DistanceBetweenPatternAndStrings_summary_list[[S]] <- min_df
}
return(DistanceBetweenPatternAndStrings_summary_list)
}
DistanceBetweenPatternAndStrings_summary("AAA", c("TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT"))
min(HammingDistance_summary)
HammingDistance_summary
S <- 5
mystr <- Dna[S] %>% str_split(., "") %>% .[[1]]
mystr
myk <- nchar(pattern)
myk
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - as.numeric(myk) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - as.numeric(myk) + 1)) {
mylist[[i]] <- mystr[i:(i + as.numeric(myk) - 1)]
}
mylist
HammingDistance_summary <- vector()
1:length(mylist)
for (i in 1:length(mylist)) {
HammingDistance_summary[i] <- HammingDistance(mylist[[i]], pattern)
}
HammingDistance_summary
mylist
pattern
pattern <- pattern %>% str_split(., "") %>% .[[1]]
pattern
DistanceBetweenPatternAndStrings_summary <- function(pattern, Dna) {
# create a list to hold the results
DistanceBetweenPatternAndStrings_summary_list <- list()
# string split the pattern input
pattern <- pattern %>% str_split(., "") %>% .[[1]]
for (S in 1:length(Dna)) {
mystr <- Dna[S] %>% str_split(., "") %>% .[[1]]
myk <- nchar(pattern)
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - as.numeric(myk) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - as.numeric(myk) + 1)) {
mylist[[i]] <- mystr[i:(i + as.numeric(myk) - 1)]
}
HammingDistance_summary <- vector()
for (i in 1:length(mylist)) {
HammingDistance_summary[i] <- HammingDistance(mylist[[i]], pattern)
}
HammingDistance_summary[which(HammingDistance_summary == min(HammingDistance_summary))]
# find the minimum value of the HammingDistance
min_value <- min(HammingDistance_summary)
# find the first index that gives the minmum HammingDistance
min_index <- which(HammingDistance_summary == min(HammingDistance_summary)) %>% min()
# find the k-mer that gave the minmum value
min_string <- mylist[[min_index]]
min_summary <- c(min_value = min_value, min_index = min_index, min_string = min_string)
DistanceBetweenPatternAndStrings_summary_list[[S]] <- min_summary
}
return(DistanceBetweenPatternAndStrings_summary_list)
}
DistanceBetweenPatternAndStrings_summary("AAA", c("TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT"))
DistanceBetweenPatternAndStrings_summary_list <- list()
# string split the pattern input
pattern <- pattern %>% str_split(., "") %>% .[[1]]
pattern
pattern <- "AAA"
Dna  <- c("TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT")
DistanceBetweenPatternAndStrings_summary("AAA", c("TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT"))
DistanceBetweenPatternAndStrings_summary <- function(pattern, Dna) {
# create a list to hold the results
DistanceBetweenPatternAndStrings_summary_list <- list()
# string split the pattern input
pattern <- pattern %>% str_split(., "") %>% .[[1]]
for (S in 1:length(Dna)) {
mystr <- Dna[S] %>% str_split(., "") %>% .[[1]]
myk <- nchar(pattern)
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - as.numeric(myk) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - as.numeric(myk) + 1)) {
mylist[[i]] <- mystr[i:(i + as.numeric(myk) - 1)]
}
HammingDistance_summary <- vector()
for (i in 1:length(mylist)) {
HammingDistance_summary[i] <- HammingDistance(mylist[[i]], pattern)
}
HammingDistance_summary[which(HammingDistance_summary == min(HammingDistance_summary))]
# find the minimum value of the HammingDistance
min_value <- min(HammingDistance_summary)
# find the first index that gives the minmum HammingDistance
min_index <- which(HammingDistance_summary == min(HammingDistance_summary)) %>% min()
# find the k-mer that gave the minmum value
min_string <- mylist[[min_index]]
min_summary <- c(min_value = min_value, min_index = min_index, min_string = min_string)
DistanceBetweenPatternAndStrings_summary_list[[S]] <- min_summary
}
return(DistanceBetweenPatternAndStrings_summary_list)
}
DistanceBetweenPatternAndStrings_summary("AAA", c("TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT"))
pattern <- "AAA"
Dna  <- c("TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT")
DistanceBetweenPatternAndStrings_summary_list <- list()
# string split the pattern input
pattern <- pattern %>% str_split(., "") %>% .[[1]]
S <- 5
mystr <- Dna[S] %>% str_split(., "") %>% .[[1]]
mystr
myk <- nchar(pattern)
myk
pattern
DistanceBetweenPatternAndStrings_summary <- function(pattern, Dna) {
# create a list to hold the results
DistanceBetweenPatternAndStrings_summary_list <- list()
# string split the pattern input
pattern <- pattern %>% str_split(., "") %>% .[[1]]
for (S in 1:length(Dna)) {
mystr <- Dna[S] %>% str_split(., "") %>% .[[1]]
myk <- length(pattern)
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - as.numeric(myk) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - as.numeric(myk) + 1)) {
mylist[[i]] <- mystr[i:(i + as.numeric(myk) - 1)]
}
HammingDistance_summary <- vector()
for (i in 1:length(mylist)) {
HammingDistance_summary[i] <- HammingDistance(mylist[[i]], pattern)
}
HammingDistance_summary[which(HammingDistance_summary == min(HammingDistance_summary))]
# find the minimum value of the HammingDistance
min_value <- min(HammingDistance_summary)
# find the first index that gives the minmum HammingDistance
min_index <- which(HammingDistance_summary == min(HammingDistance_summary)) %>% min()
# find the k-mer that gave the minmum value
min_string <- mylist[[min_index]]
min_summary <- c(min_value = min_value, min_index = min_index, min_string = min_string)
DistanceBetweenPatternAndStrings_summary_list[[S]] <- min_summary
}
return(DistanceBetweenPatternAndStrings_summary_list)
}
DistanceBetweenPatternAndStrings_summary("AAA", c("TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT"))
library(data.table)
library(tidyverse)
# HammingDistance function
HammingDistance <- function(string1, string2) {
# compare two vectors
if (is.na((string1==string2) %>% table() %>% .["FALSE"])){
return(0) # if the two vectors are the exact same, then return 0
} else {
return((string1==string2) %>% table() %>% .["FALSE"])
}
}
DistanceBetweenPatternAndStrings_summary <- function(pattern, Dna) {
# create a list to hold the results
DistanceBetweenPatternAndStrings_summary_list <- list()
# string split the pattern input
pattern <- pattern %>% str_split(., "") %>% .[[1]]
for (S in 1:length(Dna)) {
mystr <- Dna[S] %>% str_split(., "") %>% .[[1]]
myk <- length(pattern)
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - as.numeric(myk) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - as.numeric(myk) + 1)) {
mylist[[i]] <- mystr[i:(i + as.numeric(myk) - 1)]
}
HammingDistance_summary <- vector()
for (i in 1:length(mylist)) {
HammingDistance_summary[i] <- HammingDistance(mylist[[i]], pattern)
}
HammingDistance_summary[which(HammingDistance_summary == min(HammingDistance_summary))]
# find the minimum value of the HammingDistance
min_value <- min(HammingDistance_summary)
# find the first index that gives the minmum HammingDistance
min_index <- which(HammingDistance_summary == min(HammingDistance_summary)) %>% min()
# find the k-mer that gave the minmum value
min_string <- mylist[[min_index]]
min_summary <- c(min_value = min_value, min_index = min_index, min_string = min_string)
DistanceBetweenPatternAndStrings_summary_list[[S]] <- min_summary
}
return(DistanceBetweenPatternAndStrings_summary_list)
}
DistanceBetweenPatternAndStrings_summary("AAA", c("TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT"))
list_DistanceBetweenPatternAndStrings_summary <- DistanceBetweenPatternAndStrings_summary("AAA", c("TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT"))
list_DistanceBetweenPatternAndStrings_summary
DistanceBetweenPatternAndStrings_summary_list <- DistanceBetweenPatternAndStrings_summary("AAA", c("TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT"))
DistanceBetweenPatternAndStrings_summary_list
DistanceBetweenPatternAndStrings_summary_list %>% unnest()
DistanceBetweenPatternAndStrings_summary_list %>% unlist()
DistanceBetweenPatternAndStrings_summary_list %>% rbindLIst()
DistanceBetweenPatternAndStrings_summary_list %>% rbindLIst()
DistanceBetweenPatternAndStrings_summary_list %>% rbindList()
for (S in 1:length(Dna)) {
mystr <- Dna[S] %>% str_split(., "") %>% .[[1]]
myk <- length(pattern)
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - as.numeric(myk) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - as.numeric(myk) + 1)) {
mylist[[i]] <- mystr[i:(i + as.numeric(myk) - 1)]
}
HammingDistance_summary <- vector()
for (i in 1:length(mylist)) {
HammingDistance_summary[i] <- HammingDistance(mylist[[i]], pattern)
}
HammingDistance_summary[which(HammingDistance_summary == min(HammingDistance_summary))]
# find the minimum value of the HammingDistance
min_value <- min(HammingDistance_summary)
# find the first index that gives the minmum HammingDistance
min_index <- which(HammingDistance_summary == min(HammingDistance_summary)) %>% min()
# find the k-mer that gave the minmum value
min_string <- mylist[[min_index]]
min_summary <- cbind(min_value = min_value, min_index = min_index, min_string = min_string)
DistanceBetweenPatternAndStrings_summary_list[[S]] <- min_summary
}
DistanceBetweenPatternAndStrings_summary <- function(pattern, Dna) {
# create a list to hold the results
DistanceBetweenPatternAndStrings_summary_list <- list()
# string split the pattern input
pattern <- pattern %>% str_split(., "") %>% .[[1]]
for (S in 1:length(Dna)) {
mystr <- Dna[S] %>% str_split(., "") %>% .[[1]]
myk <- length(pattern)
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - as.numeric(myk) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - as.numeric(myk) + 1)) {
mylist[[i]] <- mystr[i:(i + as.numeric(myk) - 1)]
}
HammingDistance_summary <- vector()
for (i in 1:length(mylist)) {
HammingDistance_summary[i] <- HammingDistance(mylist[[i]], pattern)
}
HammingDistance_summary[which(HammingDistance_summary == min(HammingDistance_summary))]
# find the minimum value of the HammingDistance
min_value <- min(HammingDistance_summary)
# find the first index that gives the minmum HammingDistance
min_index <- which(HammingDistance_summary == min(HammingDistance_summary)) %>% min()
# find the k-mer that gave the minmum value
min_string <- mylist[[min_index]]
min_summary <- cbind(min_value = min_value, min_index = min_index, min_string = min_string)
DistanceBetweenPatternAndStrings_summary_list[[S]] <- min_summary
}
return(DistanceBetweenPatternAndStrings_summary_list)
}
DistanceBetweenPatternAndStrings_summary_list <- DistanceBetweenPatternAndStrings_summary("AAA", c("TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT"))
DistanceBetweenPatternAndStrings_summary_list %>% rbindList()
DistanceBetweenPatternAndStrings_summary_list %>% rbindList()
DistanceBetweenPatternAndStrings_summary_list
DistanceBetweenPatternAndStrings_summary <- function(pattern, Dna) {
# create a list to hold the results
DistanceBetweenPatternAndStrings_summary_list <- list()
# string split the pattern input
pattern <- pattern %>% str_split(., "") %>% .[[1]]
for (S in 1:length(Dna)) {
mystr <- Dna[S] %>% str_split(., "") %>% .[[1]]
myk <- length(pattern)
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - as.numeric(myk) + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - as.numeric(myk) + 1)) {
mylist[[i]] <- mystr[i:(i + as.numeric(myk) - 1)]
}
HammingDistance_summary <- vector()
for (i in 1:length(mylist)) {
HammingDistance_summary[i] <- HammingDistance(mylist[[i]], pattern)
}
HammingDistance_summary[which(HammingDistance_summary == min(HammingDistance_summary))]
# find the minimum value of the HammingDistance
min_value <- min(HammingDistance_summary)
# find the first index that gives the minmum HammingDistance
min_index <- which(HammingDistance_summary == min(HammingDistance_summary)) %>% min()
# find the k-mer that gave the minmum value
min_string <- mylist[[min_index]]
min_summary <- c(min_value = min_value, min_index = min_index, min_string = min_string)
DistanceBetweenPatternAndStrings_summary_list[[S]] <- min_summary
}
return(DistanceBetweenPatternAndStrings_summary_list)
}
DistanceBetweenPatternAndStrings_summary_list <- DistanceBetweenPatternAndStrings_summary("AAA", c("TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT"))
DistanceBetweenPatternAndStrings_summary_list
DistanceBetweenPatternAndStrings_summary_list %>%
map(~ str_c(., collapse = "")) %>%
unlist() %>%
table() %>%
data.frame()
DistanceBetweenPatternAndStrings_summary_list %>%
map(~ .$min_value)
DistanceBetweenPatternAndStrings_summary_list %>%
map(~ .[[1]])
DistanceBetweenPatternAndStrings_summary_list %>%
map(~ .[[1]]) %>%
unlist()
DistanceBetweenPatternAndStrings_summary_list %>%
map(~ .[[1]]) %>% sum()
DistanceBetweenPatternAndStrings_summary_list %>%
map(~ .[[1]])
unlist()
DistanceBetweenPatternAndStrings_summary_list %>%
map(~ .[[1]])
unlist()
DistanceBetweenPatternAndStrings_summary_list %>%
map(~ .[[1]]) %>%
unlist()
DistanceBetweenPatternAndStrings_summary_list %>%
map(~ .[[1]]) %>%
unlist() %>%
sum()
DistanceBetweenPatternAndStrings_summary_list %>%
map(~ .[[1]]) %>%
unlist() %>%
as.numeric() %>%
sum()
# get the DistanceBetweenPatternAndStrings
DistanceBetweenPatternAndStrings_summary_list %>%
map(~ .[[1]]) %>%
unlist() %>%
as.numeric() %>%
sum()
# get the DistanceBetweenPatternAndStrings
DistanceBetweenPatternAndStrings <- function(pattern, Dna) {
DistanceBetweenPatternAndStrings_summary_list <- DistanceBetweenPatternAndStrings_summary(pattern, Dna)
DistanceBetweenPatternAndStrings_summary_list %>%
map(~ .[[1]]) %>%
unlist() %>%
as.numeric() %>%
sum()
}
DistanceBetweenPatternAndStrings("AAA", c("TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT"))
fread("dataset_5164_1.txt")
mystring <- ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT
k <- 5
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
profile <- rbind(
A <- c(0.2, 0.2, 0.3, 0.2, 0.3),
C <- c(0.4, 0.3, 0.1, 0.5, 0.1),
G <- c(0.3, 0.3, 0.5, 0.2, 0.4),
T <- c(0.1, 0.2, 0.1, 0.1, 0.2)
)
rownames(profile) <- c("A", "C", "G", "T")
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
mylist[which(myprob_vector == max(myprob_vector))]
mystring <- ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT
k <- 5
# generat
library(data.table)
library(tidyverse)
mystring <- ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT
k <- 5
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
mystring <- ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT
k <- 5
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystring) - k + 1))
mystring <- ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT
mystring <- "ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT"
library(data.table)
library(tidyverse)
mystring <- "ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT"
k <- 5
# generate all the k-mer
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystring) - k + 1)
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
for (i in 1:(length(mystring) - k + 1)) {
mylist[[i]] <- mystring[i:(i + k - 1)]
}
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystring) - k + 1))
library(data.table)
library(tidyverse)
mystring <- "ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT"
k <- 5
# generate all the k-mer
mystring
mystring <- "ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT"
mystring %>% str_split(., "") %>% .[[1]]
mystr <- mystring %>% str_split(., "") %>% .[[1]]
mystr
# create a place holder list
mylist <- vector(mode = "list", length = (length(mystr) - k + 1))
mylist
# put all the K-mer into mylist
for (i in 1:(length(mystr) - k + 1)) {
mylist[[i]] <- mystr[i:(i + k - 1)]
}
mylist
profile <- rbind(
A <- c(0.2, 0.2, 0.3, 0.2, 0.3),
C <- c(0.4, 0.3, 0.1, 0.5, 0.1),
G <- c(0.3, 0.3, 0.5, 0.2, 0.4),
T <- c(0.1, 0.2, 0.1, 0.1, 0.2)
)
rownames(profile) <- c("A", "C", "G", "T")
Profile_most_Probable <- function(x) {
myprob <- prod(
profile["T",][which(x == "T")] %>% prod(),
profile["A",][which(x == "A")] %>% prod(),
profile["G",][which(x == "G")] %>% prod(),
profile["C",][which(x == "C")] %>% prod()
)
return(myprob)
}
myprob_vector <- mylist %>% map(Profile_most_Probable) %>% unlist()
mylist[which(myprob_vector == max(myprob_vector))]
which(myprob_vector == max(myprob_vector))
fread("dataset_159_3.txt")
library(data.table)
library(tidyverse)
fread("dataset_159_3.txt")
